{
  "openapi": "3.0.1",
  "servers": [
    {
      "description": "localhost",
      "url": "http://localhost:3001"
    }
  ],
  "info": {
    "description": "A generalized contact management API.",
    "version": "2.0.0",
    "title": "Bmore Responsive",
    "contact": {
      "email": "hello@codeforbaltimore.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "unimplemented",
      "description": "Endpoints not available as they are still under development."
    },
    {
      "name": "administration",
      "description": "Endpoints related to application administration."
    },
    {
      "name": "read-only",
      "description": "Endpoints related to read-only data access."
    },
    {
      "name": "authentication",
      "description": "Endpoints related to user authentication."
    },
    {
      "name": "authorization",
      "description": "Endpoints related to user authorization."
    },
    {
      "name": "operations",
      "description": "Endpoints related to operational characteristics."
    },
    {
      "name": "developer",
      "description": "Endpoints available to regular developers"
    },
    {
      "name": "users",
      "description": "Endpoints related to system users"
    },
    {
      "name": "email",
      "description": "Endpoints related to e-mail management"
    },
    {
      "name": "userRole",
      "description": "Endpoints related to userRole"
    },
    {
      "name": "entities",
      "description": "Endpoints related to entities"
    },
    {
      "name": "contacts",
      "description": "Endpoints related to contacts"
    },
    {
      "name": "events",
      "description": "Endpoints related to events"
    },
    {
      "name": "questionnaires",
      "description": "Endpoints related to questionnaires"
    },
    {
      "name": "check-ins",
      "description": "Endpoints related to check-ins"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v2/health": {
      "get": {
        "security": [],
        "tags": [
          "operations",
          "read-only"
        ],
        "summary": "Checks the health of the application; will be renamed to '/health'.",
        "description": "The health of individual application components is verified.",
        "responses": {
          "200": {
            "description": "The system healthcheck results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResult"
                }
              }
            }
          },
          "503": {
            "description": "The system healthcheck results, when at least one component is unhealthy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResult"
                },
                "example": {
                  "uptime": "42:42:42",
                  "environment": "dev",
                  "version": "0.0.1",
                  "requestId": "602e1bd9-3eb1-4a26-a0d1-6bf08e8c0a66",
                  "checks": [
                    {
                      "name": "database",
                      "status": "down",
                      "message": "Connection error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/security/authenticate": {
      "post": {
        "security": [],
        "tags": [
          "authentication"
        ],
        "summary": "Authenticates a user.",
        "description": "The system authentication endpoint (NOTE - We should consider switching this to Basic auth, Base64-encoding the email/password).",
        "requestBody": {
          "description": "The provided credentials.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successful authentication response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "email",
                      "value": "Address provided is invalid"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/security/token/{email}": {
      "post": {
        "tags": [
          "authentication",
          "administration",
          "unimplemented"
        ],
        "summary": "Generates a token for a non-system user.",
        "description": "Used for providing focused access to contacts who are not users of the overall system, and who do not have credentials",
        "parameters": [
          {
            "name": "email",
            "description": "E-mail address of the non-system user",
            "example": "external@example.com",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The successful authentication response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "email",
                      "value": "Address provided is invalid"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/roles": {
      "get": {
        "tags": [
          "authorization",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all authorization roles.",
        "description": "Retrieves all defined roles in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "authorization",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new authorization role.",
        "description": "Creates a new role in the application that can subsequently be granted to users.",
        "requestBody": {
          "description": "The role to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "roleName",
                      "value": "Content does not match regular expression '[a-zA-Z]\\w{3,}'"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The role 'role_viewer' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/roles/{roleName}": {
      "parameters": [
        {
          "name": "roleName",
          "description": "The name of the role to retrieve",
          "example": "role_viewer",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "authorization",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified authorization role.",
        "description": "Retrieves the detailed information for the specified role.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "role"
                    }
                  ],
                  "message": "The role 'role_viewer' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "authorization",
          "administration",
          "unimplemented"
        ],
        "summary": "Modifies an authorization role.",
        "description": "Modifies the non-permission information for the specified role.",
        "requestBody": {
          "description": "The role information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDisplayData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "Resource type",
                      "value": "role"
                    }
                  ],
                  "message": "Resource not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "authorization",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified authorization role.",
        "description": "Removes all information for the specified role.",
        "responses": {
          "204": {
            "description": "The role was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "role"
                    }
                  ],
                  "message": "The role 'role_viewer' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The resource is in use.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The role 'role_viewer' is still granted",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/roles/{roleName}/addPermission": {
      "parameters": [
        {
          "name": "roleName",
          "description": "The name of the role to modify",
          "example": "role_viewer",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": [
          "authorization",
          "administration",
          "unimplemented"
        ],
        "summary": "Adds a permission to an authorization role.",
        "description": "Adds a new permission to a role that grants access to a specific resource.",
        "requestBody": {
          "description": "The permission to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleResource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "roleName",
                      "value": "Content does not match regular expression '[a-zA-Z]\\w{3,}'"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "role"
                    }
                  ],
                  "message": "The role 'role_viewer' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The role already has the requested permission.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The permission 'GET:/roles/*' already exists for the role 'role_viewer'",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/roles/{roleName}/removePermission": {
      "parameters": [
        {
          "name": "roleName",
          "description": "The name of the role to modify",
          "example": "role_viewer",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": [
          "authorization",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes a permission from an authorization role.",
        "description": "Removes an existing permission from a role that granted access to a specific resource.",
        "requestBody": {
          "description": "The permission to remove.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleResource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "roleName",
                      "value": "Content does not match regular expression '[a-zA-Z]\\w{3,}'"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "role"
                    }
                  ],
                  "message": "The role 'role_viewer' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/role-grants/": {
      "post": {
        "tags": [
          "authorization",
          "administration",
          "unimplemented"
        ],
        "summary": "Grants one or more roles to one or more system users.",
        "description": "Grants system users the ability to access application endpoints.",
        "requestBody": {
          "description": "The grants to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RoleId"
                    },
                    {
                      "$ref": "#/components/schemas/UserId"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the resulting grants.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoleGrant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "roleName",
                      "value": "Content does not match regular expression '[a-zA-Z]\\w{3,}'"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "role"
                    }
                  ],
                  "message": "The role 'role_viewer' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/role-grants/contact/{email}": {
      "post": {
        "tags": [
          "authorization",
          "administration",
          "unimplemented"
        ],
        "summary": "Grants a role to a non-system user.",
        "description": "Grants the non-system user the ability to access application endpoints.",
        "parameters": [
          {
            "name": "email",
            "description": "E-mail address of the non-system user",
            "example": "external@example.com",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "requestBody": {
          "description": "The role to grant.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleId"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The grant was successfully created."
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "roleName",
                      "value": "Content does not match regular expression '[a-zA-Z]\\w{3,}'"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "role"
                    }
                  ],
                  "message": "The role 'role_viewer' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "get": {
        "tags": [
          "authorization",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the roles granted to a non-system user.",
        "description": "Retrieves all roles granted to the non-system user.",
        "parameters": [
          {
            "name": "email",
            "description": "E-mail address of the user",
            "example": "user@example.com",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The roles granted to the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleId"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/role-grants/contact/{email}/revoke": {
      "post": {
        "tags": [
          "authorization",
          "administration",
          "unimplemented"
        ],
        "summary": "Revokes a role from a user.",
        "description": "Revokes a user's the ability to access specific  application endpoints.",
        "parameters": [
          {
            "name": "email",
            "description": "E-mail address of the user",
            "example": "user@example.com",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "requestBody": {
          "description": "The role to revoke.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleId"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The grant was successfully revoked."
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "roleName",
                      "value": "Content does not match regular expression '[a-zA-Z]\\w{3,}'"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "role"
                    }
                  ],
                  "message": "The role 'role_viewer' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/role-grants/{email}": {
      "get": {
        "tags": [
          "authorization",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves roles granted to the user.",
        "description": "Retrieves all roles granted to the user.",
        "parameters": [
          {
            "name": "email",
            "description": "E-mail address of the grantee",
            "example": "user@example.com",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The roles granted to the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleId"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "user"
                    }
                  ],
                  "message": "The user 'user@example.com' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/role-grants/{email}/revoke": {
      "post": {
        "tags": [
          "authorization",
          "administration",
          "unimplemented"
        ],
        "summary": "Revokes a role from a user.",
        "description": "Revokes a user's ability to access specific application endpoints.",
        "parameters": [
          {
            "name": "email",
            "description": "E-mail address of the grantee",
            "example": "user@example.com",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The role to revoke.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleId"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The grant was successfully revoked."
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "roleName",
                      "value": "Content does not match regular expression '[a-zA-Z]\\w{3,}'"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "user"
                    }
                  ],
                  "message": "The user 'user@example.com' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/users": {
      "get": {
        "tags": [
          "users",
          "read-only"
        ],
        "summary": "Retrieves all users.",
        "description": "Retrieves all defined users in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBasicViewData"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "users",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new user.",
        "description": "Creates a new user in the application that can subsequently be used to authenticate.",
        "requestBody": {
          "description": "The user to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "email",
                      "value": "Content is not a valid e-mail address"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The user 'user@example.com' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/users/{email}": {
      "parameters": [
        {
          "name": "email",
          "description": "The e-mail address of a system user",
          "example": "homer.simpson@example.com",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "users",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified user.",
        "description": "Retrieves the detailed information for the user.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "user"
                    }
                  ],
                  "message": "The user 'user@example.com' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "users",
          "administration",
          "unimplemented"
        ],
        "summary": "Modifies a user.",
        "description": "Modifies the non-identifying information for the specified user.",
        "requestBody": {
          "description": "The user information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "user"
                    }
                  ],
                  "message": "The user 'user@example.com' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "users",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified user.",
        "description": "Removes all information for the user.",
        "responses": {
          "204": {
            "description": "The user was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "user"
                    }
                  ],
                  "message": "The user 'user@example.com' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/contacts": {
      "get": {
        "tags": [
          "contacts",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all contacts.",
        "description": "Retrieves all defined contacts in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created contacts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "contacts",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new contact.",
        "description": "Creates a new contact in the application that can subsequently be used for entity interactions.",
        "requestBody": {
          "description": "The contact to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created contact.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "primaryEmail",
                      "value": "Content is not a valid e-mail address"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The contact 'ned_flanders' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/contacts/{contactId}": {
      "parameters": [
        {
          "name": "contactId",
          "description": "The identifier of the contact",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "get": {
        "tags": [
          "contacts",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified contact.",
        "description": "Retrieves the detailed information for the contact.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created contact.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "contact"
                    }
                  ],
                  "message": "The contact 'ned_flanders' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "contacts",
          "administration",
          "unimplemented"
        ],
        "summary": "Modifies a contact.",
        "description": "Modifies the non-identifying information for the specified contact.",
        "requestBody": {
          "description": "The contact information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified contact.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "contact"
                    }
                  ],
                  "message": "The contact 'ned_flanders' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "contacts",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified contact.",
        "description": "Removes all information for the contact.",
        "responses": {
          "204": {
            "description": "The contact was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "contact"
                    }
                  ],
                  "message": "The contact 'ned_flanders' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The resource is in use.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The contact 'ned_flanders' is associated with the entity 'caresouth'",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/entity-types": {
      "get": {
        "tags": [
          "entities",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all entity types.",
        "description": "Retrieves all defined entity types in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created entity types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TypeReferenceBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new entity type.",
        "description": "Creates a new entity type in the application that can subsequently be used for entity classification.",
        "requestBody": {
          "description": "The entity type to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TypeReferenceData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeReferenceViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "typeName",
                      "value": "Content is not a valid name"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The entity type 'primary_care' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/entity-types/{typeId}": {
      "parameters": [
        {
          "name": "typeId",
          "description": "The identifier of the entity type.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "get": {
        "tags": [
          "entities",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified entity type.",
        "description": "Retrieves the detailed information for the entity type.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created entity type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeReferenceViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "entityType"
                    }
                  ],
                  "message": "The entity type 'primary_care' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Modifies an entity type.",
        "description": "Modifies the non-identifying information for the specified entity type.",
        "requestBody": {
          "description": "The entity type information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TypeReferenceContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified entity type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TypeReferenceViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "entityType"
                    }
                  ],
                  "message": "The entity type 'primary_care' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified entity type.",
        "description": "Removes all information for the entity type.",
        "responses": {
          "204": {
            "description": "The entity type was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "entityType"
                    }
                  ],
                  "message": "The entity type 'primary_care' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The resource is in use.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The entity type 'primary_care' is associated with one or more entities",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/entities": {
      "get": {
        "tags": [
          "entities",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all entities.",
        "description": "Retrieves all defined entities in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new entity.",
        "description": "Creates a new entity in the application that can subsequently be used for contact interactions.",
        "requestBody": {
          "description": "The entity to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created entity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "typeName",
                      "value": "Content is not a valid type name"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "entityType"
                    }
                  ],
                  "message": "The entity type 'primary_care' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The entity 'caresouth' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/entities/{entityId}": {
      "parameters": [
        {
          "name": "entityId",
          "description": "The identifier of the entity.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "get": {
        "tags": [
          "entities",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified entity.",
        "description": "Retrieves the detailed information for the entity.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created entity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "entityType"
                    }
                  ],
                  "message": "The entity 'caresouth' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Modifies an entity.",
        "description": "Modifies the non-identifying information for the specified entity.",
        "requestBody": {
          "description": "The entity information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified entity.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "entityType"
                    }
                  ],
                  "message": "The entity 'caresouth' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified entity.",
        "description": "Removes all information for the entity.",
        "responses": {
          "204": {
            "description": "The entity was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "entityType"
                    }
                  ],
                  "message": "The entity 'caresouth' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The resource is in use.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The entity 'caresouth' is still associated with a contact",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/contact-associations": {
      "get": {
        "tags": [
          "contacts",
          "entities",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all contact associations.",
        "description": "Retrieves all defined contact associations in the application. Query  parameters can be used to filter the results by entity, contact, or  association type. Values provided will be treated as a logical `AND` when filtering.\n",
        "parameters": [
          {
            "name": "contactName",
            "description": "The name of an associated contact used to filter results.",
            "example": "ned_flanders",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\w{3,}$"
            }
          },
          {
            "name": "entityName",
            "description": "The name of an associated entity used to filter results.",
            "example": "caresouth",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\w{3,}$"
            }
          },
          {
            "name": "typeName",
            "description": "The name of a contact association type used to filter results.",
            "example": "primary_contact",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\w{3,}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data corresponding to the created contact associations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactAssociationId"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "contacts",
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new contact association.",
        "description": "Creates a new contact association that relates a contact to an entity.",
        "requestBody": {
          "description": "The contact association to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactAssociationId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAssociationViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "typeName",
                      "value": "Content is not a valid name"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "entityType"
                    }
                  ],
                  "message": "Resource not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "An contact association for 'ned_flanders' as 'primary_contact' for 'caresouth' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/contact-associations/{contactId}/{entityId}/{typeId}": {
      "parameters": [
        {
          "name": "contactId",
          "description": "The identifier of the contact.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        },
        {
          "name": "entityId",
          "description": "The identifier of the entity.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        },
        {
          "name": "typeId",
          "description": "The identifier of the association type.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "delete": {
        "tags": [
          "contacts",
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Deletes a contact association.",
        "description": "Deletes a contact association that related a contact to an entity.",
        "responses": {
          "204": {
            "description": "The contact association has been deleted."
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "typeName",
                      "value": "Content is not a valid name"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "contactAssociation"
                    }
                  ],
                  "message": "The contact association 'caresouth:ned_flanders:primary_contact' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "get": {
        "tags": [
          "contacts",
          "entities",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified contact association.",
        "description": "Retrieves the detailed information for the contact association.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created contact association.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAssociationViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "contactAssociation"
                    }
                  ],
                  "message": "The contact association 'caresouth:ned_flanders:primary_contact' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/contact-association-types": {
      "get": {
        "tags": [
          "contacts",
          "entities",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all contact association types.",
        "description": "Retrieves all defined contact association types in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created contact association types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TypeReferenceBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "contacts",
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new contact association type.",
        "description": "Creates a new contact association type in the application that can subsequently be used for contact association classification.",
        "requestBody": {
          "description": "The contact association type to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TypeReferenceData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeReferenceViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "typeName",
                      "value": "Content is not a valid name"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "A contact association type with the name 'primary_contact' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/contact-association-types/{typeId}": {
      "parameters": [
        {
          "name": "typeId",
          "description": "The identifier of the association type.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "get": {
        "tags": [
          "contacts",
          "entities",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified contact association type.",
        "description": "Retrieves the detailed information for the contact association type.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created contact association type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeReferenceViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "contactAssociationType"
                    }
                  ],
                  "message": "The contact association type 'primary_contact' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "contacts",
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Modifies an contact association type.",
        "description": "Modifies the non-identifying information for the specified contact association type.",
        "requestBody": {
          "description": "The contact association type information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TypeReferenceContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified contact association type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeReferenceViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "contactAssociationType"
                    }
                  ],
                  "message": "The contact association type 'primary_contact' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "contacts",
          "entities",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified contact association type.",
        "description": "Removes all information for the contact association type.",
        "responses": {
          "204": {
            "description": "The contact association type was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "contactAssociationType"
                    }
                  ],
                  "message": "The contact association type 'primary_contact' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Resource is still in use.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The contact association type 'primary_contact' is used by contact associations",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/email": {
      "post": {
        "tags": [
          "email",
          "administration",
          "unimplemented"
        ],
        "summary": "Send one or more e-mail messages.",
        "description": "Sends the e-mail messages generated from the provided template. The contact association type, contact and entity information are used to filter the recipients.",
        "requestBody": {
          "description": "The specification to use when generating e-mail messages.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailSpecification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The number of e-mail messages generated for sending.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "sentMessageCount"
                  ],
                  "properties": {
                    "sentMessageCount": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "association.typeName",
                      "value": "Type name is not a valid association type"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/email-templates": {
      "get": {
        "tags": [
          "email",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all templates.",
        "description": "Retrieves all defined e-mail templates in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailTemplateBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "email",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new e-mail template.",
        "description": "Creates a new e-mail template in the application that can subsequently be used for contact interactions.",
        "requestBody": {
          "description": "The template to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplateData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "name",
                      "value": "Content is not a valid template name"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The template 'assisted_living' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/email-templates/{templateId}": {
      "parameters": [
        {
          "name": "templateId",
          "description": "The identifier of the e-mail template.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "get": {
        "tags": [
          "email",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified e-mail template.",
        "description": "Retrieves the detailed information for the e-mail template.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created e-mail template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "emailTemplate"
                    }
                  ],
                  "message": "The e-mail template 'assisted_living' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "email",
          "administration",
          "unimplemented"
        ],
        "summary": "Modifies an e-mail template.",
        "description": "Modifies the non-identifying information for the specified e-mail template.",
        "requestBody": {
          "description": "The e-mail template information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplateContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified e-mail template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "emailTemplate"
                    }
                  ],
                  "message": "The e-mail template 'assisted_living' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "email",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified e-mail template.",
        "description": "Removes all information for the e-mail template.",
        "responses": {
          "204": {
            "description": "The e-mail template was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "emailTemplate"
                    }
                  ],
                  "message": "The e-mail template 'assisted_living' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/events": {
      "get": {
        "tags": [
          "events",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all events.",
        "description": "Retrieves all defined events in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "events",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new event.",
        "description": "Creates a new event in the application that can subsequently be used for check-in categorization.",
        "requestBody": {
          "description": "The event to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "eventName",
                      "value": "Content is not a valid event name"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The event 'thing_in_2020' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/events/{eventId}": {
      "parameters": [
        {
          "name": "eventId",
          "description": "The identifier of the event.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "get": {
        "tags": [
          "events",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified event.",
        "description": "Retrieves the detailed information for the event.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "event"
                    }
                  ],
                  "message": "The event 'thing_in_2020' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "events",
          "administration",
          "unimplemented"
        ],
        "summary": "Modifies an event.",
        "description": "Modifies the non-identifying information for the specified event.",
        "requestBody": {
          "description": "The event information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the modified event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "event"
                    }
                  ],
                  "message": "The event 'thing_in_2020' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "events",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified event.",
        "description": "Removes all information for the event.",
        "responses": {
          "204": {
            "description": "The event was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "event"
                    }
                  ],
                  "message": "The event 'thing_in_2020' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/questions": {
      "get": {
        "tags": [
          "questionnaires",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all questions.",
        "description": "Retrieves all defined questions in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created questions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "questionnaires",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new question.",
        "description": "Creates a new question in the application that can subsequently be used for questionnaire creation.",
        "requestBody": {
          "description": "The question to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created question.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "questionType",
                      "value": "Content is not a valid question type"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The question 'Are you having a cow?' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/questions/{questionId}": {
      "parameters": [
        {
          "name": "questionId",
          "description": "The identifier of the question.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "get": {
        "tags": [
          "questionnaires",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified question.",
        "description": "Retrieves the detailed information for the question.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created question.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "question"
                    }
                  ],
                  "message": "The question 'Are you having a cow?' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "questionnaires",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified question.",
        "description": "Removes all information for the question.",
        "responses": {
          "204": {
            "description": "The question was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "question"
                    }
                  ],
                  "message": "The question 'Are you having a cow?' was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The resource is in use.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The question 'Are you having a cow?' is in use",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/questionnaires": {
      "get": {
        "tags": [
          "questionnaires",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves all questionnaires.",
        "description": "Retrieves all defined questionnaires in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created questionnaires.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionnaireBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "questionnaires",
          "administration",
          "unimplemented"
        ],
        "summary": "Creates a new questionnaire.",
        "description": "Creates a new questionnaire in the application.",
        "requestBody": {
          "description": "The questionnaire to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionnaireData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created questionnaire.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionnaireViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "questionType",
                      "value": "Content is not a valid question type"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The questionnaire 'Check-in questions for 2020 event' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/questionnaires/{questionnaireId}": {
      "parameters": [
        {
          "name": "questionnaireId",
          "description": "The identifier of the question.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "get": {
        "tags": [
          "questionnaires",
          "read-only",
          "unimplemented"
        ],
        "summary": "Retrieves the specified questionnaire.",
        "description": "Retrieves the detailed information for the questionnaire.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created questionnaire.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionnaireViewData"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "questionnaire"
                    }
                  ],
                  "message": "The specified questionnaire was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "questionnaires",
          "administration",
          "unimplemented"
        ],
        "summary": "Modifies a questionnaire.",
        "description": "Modifies the non-identifying information for the specified \nquestionnaire. The order of the questions can be changed in addition to\nadding/removing questions. All modifications create a new questionnaire \nrevision.",
        "requestBody": {
          "description": "The questionnaire information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionnaireData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created questionnaire.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionnaireViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "description",
                      "value": "Content is not a valid description"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "questionnaire"
                    }
                  ],
                  "message": "The specified questionnaire was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The question 'Are you having a cow?' already exists in this questionnaire",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "questionnaires",
          "administration",
          "unimplemented"
        ],
        "summary": "Removes the specified questionnaire.",
        "description": "Removes all information for the questionnaire.",
        "responses": {
          "204": {
            "description": "The questionnaire was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "resource_type",
                      "value": "questionnaire"
                    }
                  ],
                  "message": "The specified questionnaire was not found",
                  "statusCode": 404
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The resource is in use.",
            "content": {
              "application/json": {
                "example": {
                  "message": "The question 'Are you having a cow?' is in use",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v2/check-ins": {
      "post": {
        "tags": [
          "check-ins",
          "administration",
          "unimplemented"
        ],
        "summary": "Generates a check-in response to a questionnare.",
        "description": "Creates a check-in response in the application.",
        "requestBody": {
          "description": "The check-in information to store.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckInData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the saved check-in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInViewData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content provided.",
            "content": {
              "application/json": {
                "example": {
                  "details": [
                    {
                      "name": "questionnaireVersion",
                      "value": "Content is not a valid number"
                    }
                  ],
                  "message": "Request invalid",
                  "statusCode": 400
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "The resource already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "A check-in for the questionnaire 'Check-in questions for 2020 event' already exists",
                  "statusCode": 409
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "The provided credentials were invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "message": "Invalid credentials",
              "statusCode": 401
            }
          }
        }
      },
      "Forbidden": {
        "description": "The user does not have the permissions needed to access the API.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "message": "Access not permitted",
              "statusCode": 403
            }
          }
        }
      },
      "ServerError": {
        "description": "The server was unable to process the request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "message": "Request processing failed",
              "statusCode": 500
            }
          }
        }
      }
    },
    "schemas": {
      "HealthCheckData": {
        "type": "object",
        "description": "The health status of an application component.",
        "required": [
          "name",
          "status"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the component.",
            "example": "database"
          },
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "unhealthy"
            ],
            "description": "Whether the component is healthy or not.",
            "example": "healthy"
          },
          "message": {
            "type": "string",
            "description": "The detailed health message (if applicable).",
            "example": "N/A"
          }
        }
      },
      "HealthCheckResult": {
        "type": "object",
        "description": "The health status of the application.",
        "required": [
          "uptime",
          "environment",
          "version",
          "requestId",
          "checks"
        ],
        "properties": {
          "uptime": {
            "type": "string",
            "description": "The amount of time this server has been running, expressed as a sequence of integers of decreasing time units; unused units (for example, years) will not be included.",
            "example": "42:42:42"
          },
          "environment": {
            "type": "string",
            "description": "The environment in which the application is deployed.",
            "example": "dev"
          },
          "version": {
            "type": "string",
            "description": "The semantic version of the deployed application.",
            "example": "0.0.1"
          },
          "requestId": {
            "type": "string",
            "description": "A unique identifier for the health request.",
            "format": "uuid",
            "example": "602e1bd9-3eb1-4a26-a0d1-6bf08e8c0a66"
          },
          "checks": {
            "type": "array",
            "description": "The health status of the individual components.",
            "items": {
              "$ref": "#/components/schemas/HealthCheckData"
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "description": "The request used to authenticate.",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The user's e-mail address.",
            "format": "email",
            "example": "example@example.com"
          },
          "password": {
            "type": "string",
            "description": "The user's authentication credentials.",
            "example": "somePassword"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "description": "The result of an authentication request.",
        "required": [
          "token",
          "expiresAt"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The JWT content for subsequent authorization.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NVPair": {
        "type": "object",
        "description": "An ad hoc name-value pair",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The reference name for the pair",
            "maxLength": 64,
            "minLength": 2,
            "example": "refName"
          },
          "value": {
            "type": "string",
            "description": "The referenced value",
            "maxLength": 256,
            "minLength": 1,
            "example": "example value"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Content format for error responses",
        "required": [
          "message",
          "statusCode"
        ],
        "properties": {
          "details": {
            "type": "array",
            "description": "Arbitrary name-value pairs associated with the error",
            "maximum": 10,
            "items": {
              "$ref": "#/components/schemas/NVPair"
            }
          },
          "message": {
            "type": "string",
            "description": "The error message"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "minimum": 100,
            "maximum": 600,
            "exclusiveMaximum": true,
            "description": "The HTTP status code associated with the error"
          }
        }
      },
      "RoleId": {
        "type": "object",
        "description": "The identifier of the role.",
        "required": [
          "roleName"
        ],
        "properties": {
          "roleName": {
            "type": "string",
            "pattern": "^[a-zA-Z]\\w{3,}$",
            "description": "The name of the role.",
            "example": "role_viewer"
          }
        }
      },
      "RoleDisplayData": {
        "type": "object",
        "description": "Defines authorization role display data.",
        "required": [
          "description"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the role.",
            "example": "Users with this role can view roles"
          }
        }
      },
      "RoleContent": {
        "type": "object",
        "description": "Defines the content that can be provided when modifying an authorization role.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RoleDisplayData"
          }
        ]
      },
      "RoleResource": {
        "type": "object",
        "description": "The resource that a role is intended to grant access to.",
        "required": [
          "methods",
          "path"
        ],
        "properties": {
          "methods": {
            "type": "array",
            "description": "The HTTP methods corresponding to this role.",
            "items": {
              "type": "string",
              "enum": [
                "DELETE",
                "GET",
                "POST",
                "PUT"
              ],
              "description": "An HTTP method for the corresponding resource endpoint.",
              "example": "GET"
            }
          },
          "path": {
            "type": "string",
            "format": "uri",
            "description": "The relative path to the resource endpoint to grant.",
            "example": "/roles/*"
          }
        }
      },
      "RoleData": {
        "type": "object",
        "description": "Defines the content that can be provided when creating an authorization role.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RoleId"
          },
          {
            "$ref": "#/components/schemas/RoleContent"
          },
          {
            "$ref": "#/components/schemas/RoleResourceData"
          }
        ]
      },
      "RoleBasicViewData": {
        "type": "object",
        "description": "A minimal read-only view of an authorization role.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RoleId"
          },
          {
            "$ref": "#/components/schemas/RoleDisplayData"
          }
        ]
      },
      "RoleViewData": {
        "type": "object",
        "description": "A  read-only view of an authorization role.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RoleId"
          },
          {
            "$ref": "#/components/schemas/RoleData"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      },
      "RoleResourceData": {
        "description": "Data for an authorization role and all associated resources.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RoleDisplayData"
          },
          {
            "type": "object",
            "description": "The role's associated resources.",
            "properties": {
              "resources": {
                "type": "array",
                "description": "The granted resources.",
                "items": {
                  "$ref": "#/components/schemas/RoleResource"
                }
              }
            }
          }
        ]
      },
      "UserRoleGrant": {
        "type": "object",
        "description": "An authorization role",
        "required": [
          "roleId",
          "userId"
        ],
        "properties": {
          "roleId": {
            "$ref": "#/components/schemas/RoleId"
          },
          "userId": {
            "$ref": "#/components/schemas/UserId"
          }
        }
      },
      "AuditData": {
        "type": "object",
        "description": "The audit information for data in the application.",
        "readOnly": true,
        "required": [
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the referenced object was created.",
            "example": "2020-01-21T13:45:52.348Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the referenced object was last modified.",
            "example": "2020-01-21T13:45:52.348Z"
          }
        }
      },
      "PhoneNumber": {
        "type": "object",
        "description": "A phone number.",
        "required": [
          "countryCode",
          "number"
        ],
        "properties": {
          "countryCode": {
            "type": "string",
            "pattern": "^\\d{1,4}$",
            "description": "The country code for the phone number.",
            "example": "98"
          },
          "number": {
            "type": "string",
            "pattern": "^\\d{6,}$",
            "description": "The full in-country representation for the phone number.",
            "example": "5551212"
          },
          "type": {
            "type": "string",
            "pattern": "^\\w{3,}$",
            "example": "Work"
          }
        }
      },
      "UserId": {
        "type": "object",
        "description": "The identifier of a user.",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The user's e-mail address",
            "example": "homer.simpson@example.com"
          }
        }
      },
      "UserDisplayData": {
        "type": "object",
        "description": "Defines user display data.",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The text to be displayed to represent the user",
            "example": "Homer Simpson"
          }
        }
      },
      "UserContent": {
        "type": "object",
        "description": "Defines the content that can be provided when modifying a user.",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserDisplayData"
          }
        ],
        "properties": {
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "attributes": {
            "type": "array",
            "description": "Arbitrary name-value pairs associated with the user",
            "maximum": 10,
            "items": {
              "$ref": "#/components/schemas/NVPair"
            }
          }
        }
      },
      "UserData": {
        "type": "object",
        "description": "Defines the content that can be provided when creating a user.",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserId"
          },
          {
            "$ref": "#/components/schemas/UserContent"
          }
        ]
      },
      "UserBasicViewData": {
        "type": "object",
        "description": "Defines the minimal read-only content retrieved for a user.",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserId"
          },
          {
            "$ref": "#/components/schemas/UserDisplayData"
          }
        ]
      },
      "UserViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for a user.",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserId"
          },
          {
            "$ref": "#/components/schemas/UserData"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      },
      "ContactId": {
        "type": "object",
        "description": "The identifier of a contact.",
        "required": [
          "contactId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of a contact",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "ContactDisplayData": {
        "type": "object",
        "description": "Defines contact display data.",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The text to be displayed to represent the contact.",
            "example": "Ned Flanders, Esq."
          }
        }
      },
      "ContactContent": {
        "type": "object",
        "description": "Defines the content that can be provided when modifying a contact.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactDisplayData"
          }
        ],
        "required": [
          "primaryEmail",
          "primaryPhone"
        ],
        "properties": {
          "primaryEmail": {
            "type": "string",
            "format": "email",
            "description": "Primary e-mail address for a contact.",
            "example": "ned.flanders@example.com"
          },
          "additionalEmails": {
            "type": "array",
            "description": "Additional e-mail addresses associated with a contact.",
            "items": {
              "type": "string",
              "format": "email",
              "description": "An additional e-mail address for a contact.",
              "example": "nflanders@example.com"
            }
          },
          "primaryPhoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "additionalPhoneNumbers": {
            "type": "array",
            "description": "Additional phone numbers associated with a contact.",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          }
        }
      },
      "ContactData": {
        "type": "object",
        "description": "Defines the content that can be provided when creating a contact.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactContent"
          }
        ]
      },
      "ContactBasicViewData": {
        "type": "object",
        "description": "Defines the minimal read-only content retrieved for a contact.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactId"
          },
          {
            "$ref": "#/components/schemas/ContactDisplayData"
          }
        ]
      },
      "ContactViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for a contact.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactId"
          },
          {
            "$ref": "#/components/schemas/ContactData"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      },
      "TypeReferenceId": {
        "type": "object",
        "description": "An identifier for generic type information for classification.",
        "required": [
          "typeId"
        ],
        "properties": {
          "typeId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of a classifying type",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "TypeReferenceDisplayData": {
        "type": "object",
        "description": "Descriptive type information for classification.",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The text to be displayed to represent the type.",
            "example": "Primary Care"
          }
        }
      },
      "TypeReferenceContent": {
        "type": "object",
        "description": "Defines the type information for modification.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TypeReferenceDisplayData"
          }
        ]
      },
      "TypeReferenceData": {
        "type": "object",
        "description": "Defines the information for creating a type reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TypeReferenceContent"
          }
        ]
      },
      "TypeReferenceBasicViewData": {
        "type": "object",
        "description": "Defines the minimal read-only content retrieved for a type reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TypeReferenceId"
          },
          {
            "$ref": "#/components/schemas/TypeReferenceDisplayData"
          }
        ]
      },
      "TypeReferenceViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for a type reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TypeReferenceId"
          },
          {
            "$ref": "#/components/schemas/TypeReferenceContent"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      },
      "LocalAddress": {
        "type": "object",
        "description": "Mailing address or location.",
        "required": [
          "streetAddress",
          "city",
          "state",
          "postalCode"
        ],
        "properties": {
          "streetAddress": {
            "type": "array",
            "description": "The street address (can be multiple lines).",
            "items": {
              "minItems": 1,
              "maxItems": 4,
              "type": "string",
              "example": "123 Anyplace St."
            }
          },
          "city": {
            "type": "string",
            "description": "The city where the address is located.",
            "example": "Baltimore"
          },
          "state": {
            "type": "string",
            "description": "The state where the address is located.",
            "example": "MD"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code corresponding to the address.",
            "example": "12345"
          }
        }
      },
      "EntityId": {
        "type": "object",
        "description": "The identifier of an entity.",
        "required": [
          "entityId"
        ],
        "properties": {
          "entityId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of an entity",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "EntityDisplayData": {
        "type": "object",
        "description": "Defines entity display data.",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The text to be displayed to represent the entity.",
            "example": "CareSouth Assisted Living"
          }
        }
      },
      "EntityContent": {
        "type": "object",
        "description": "Defines the content that can be provided when modifying an entity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityDisplayData"
          },
          {
            "$ref": "#/components/schemas/TypeReferenceId"
          }
        ],
        "required": [
          "streetAddress"
        ],
        "properties": {
          "streetAddress": {
            "$ref": "#/components/schemas/LocalAddress"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/LocalAddress"
          }
        }
      },
      "EntityData": {
        "type": "object",
        "description": "Defines the content that can be provided when creating an entity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityContent"
          }
        ]
      },
      "EntityBasicViewData": {
        "type": "object",
        "description": "Defines the minimal read-only content retrieved for an entity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityId"
          },
          {
            "$ref": "#/components/schemas/EntityDisplayData"
          },
          {
            "$ref": "#/components/schemas/TypeReferenceId"
          }
        ]
      },
      "EntityViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for an entity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityId"
          },
          {
            "$ref": "#/components/schemas/EntityData"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      },
      "ContactAssociationId": {
        "type": "object",
        "description": "The identifier of an association between a contact and an entity.",
        "required": [
          "entity",
          "contact",
          "associationType"
        ],
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/EntityId"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactId"
          },
          "associationType": {
            "$ref": "#/components/schemas/TypeReferenceId"
          }
        }
      },
      "ContactAssociationViewData": {
        "type": "object",
        "description": "Defines the details of an association between a contact and an entity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ],
        "required": [
          "entity",
          "contact",
          "associationType"
        ],
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/EntityData"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactData"
          },
          "associationType": {
            "$ref": "#/components/schemas/TypeReferenceData"
          }
        }
      },
      "EmailSpecification": {
        "type": "object",
        "description": "Defines the specification for sending an e-mail.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailTemplateId"
          }
        ],
        "properties": {
          "entities": {
            "type": "array",
            "maxLength": 32,
            "items": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          "contacts": {
            "type": "array",
            "maxLength": 32,
            "items": {
              "$ref": "#/components/schemas/ContactId"
            }
          },
          "entityTypes": {
            "type": "array",
            "maxLength": 32,
            "items": {
              "$ref": "#/components/schemas/TypeReferenceId"
            }
          },
          "associationTypes": {
            "type": "array",
            "maxLength": 32,
            "items": {
              "$ref": "#/components/schemas/TypeReferenceId"
            }
          }
        }
      },
      "EmailTemplateId": {
        "type": "object",
        "description": "The identifier of a e-mail template.",
        "required": [
          "templateId"
        ],
        "properties": {
          "templateId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of the template",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "EmailTemplateDisplayData": {
        "type": "object",
        "description": "Defines e-mail template display data.",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The text to be displayed to represent the template.",
            "example": "Assisted Living Check-In"
          }
        }
      },
      "EmailTemplateContent": {
        "type": "object",
        "description": "Defines the content that can be provided when modifying an e-mail template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailTemplateDisplayData"
          }
        ],
        "required": [
          "subjectTemplate",
          "bodyTemplate"
        ],
        "properties": {
          "subjectTemplate": {
            "type": "string",
            "description": "A Markdown template for an e-mail message subject. Substitution fields should be included \nusing double-brace notation, and must be named  using JSON object notation patterns \n(for example, `{{entity.name}}`).\n",
            "example": "{{event.type}} Check-in"
          },
          "bodyTemplate": {
            "type": "string",
            "description": "A Markdown template for an e-mail message body. Substitution fields should be included \nusing double-brace notation, and must be named  using JSON object notation patterns \n(for example, `{{entity.name}}`).\n",
            "example": "Greetings, {{contact.displayName}}!\n\nClick [here](https://example.com/login) to log in!\n"
          }
        }
      },
      "EmailTemplateData": {
        "type": "object",
        "description": "Defines the content that can be provided when creating an e-mail template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailTemplateContent"
          }
        ]
      },
      "EmailTemplateBasicViewData": {
        "type": "object",
        "description": "Defines the basic view of an e-mail template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailTemplateId"
          },
          {
            "$ref": "#/components/schemas/EmailTemplateDisplayData"
          }
        ]
      },
      "EmailTemplateViewData": {
        "type": "object",
        "description": "Defines the details of an e-mail template.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailTemplateId"
          },
          {
            "$ref": "#/components/schemas/EmailTemplateData"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      },
      "EventId": {
        "type": "object",
        "description": "The identifier of an event.",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of the template",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "EventDisplayData": {
        "type": "object",
        "description": "Defines event display data.",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The text to be displayed to represent the event.",
            "example": "Big Health Event"
          }
        }
      },
      "EventContent": {
        "type": "object",
        "description": "Defines the content that can be provided when modifying an event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventDisplayData"
          }
        ],
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Start date of the event"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "Start date of the event"
          }
        }
      },
      "EventData": {
        "type": "object",
        "description": "Defines the content that can be provided when creating an event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventContent"
          }
        ]
      },
      "EventBasicViewData": {
        "type": "object",
        "description": "Defines the minimal read-only content retrieved for an event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventId"
          },
          {
            "$ref": "#/components/schemas/EventDisplayData"
          }
        ]
      },
      "EventViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for an event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventId"
          },
          {
            "$ref": "#/components/schemas/EventData"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      },
      "QuestionIdData": {
        "type": "object",
        "description": "The identifier of a question for a questionnaire.",
        "required": [
          "questionId"
        ],
        "properties": {
          "questionId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of the question",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "QuestionBasicContent": {
        "type": "object",
        "description": "Defines the data used when creating a question for a questionnaire.",
        "required": [
          "questionText",
          "questionType",
          "required"
        ],
        "properties": {
          "questionText": {
            "type": "string",
            "description": "Information that will be displayed to the questionnaire recipient",
            "maxLength": 1024,
            "minLength": 3,
            "example": "Are you having a cow?"
          },
          "questionType": {
            "type": "string",
            "description": "Identifies the type of question; this is used for both validation and rendering.",
            "example": "boolean",
            "enum": [
              "informational",
              "boolean",
              "short-text",
              "long-text",
              "single-select",
              "multi-select"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Indicates whether the question must be answered. This should always be false for an\ninformational question",
            "default": false
          }
        }
      },
      "QuestionContent": {
        "type": "object",
        "description": "Defines the data used when creating a question for a questionnaire.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionBasicContent"
          }
        ],
        "properties": {
          "options": {
            "type": "array",
            "example": [
              "Yes",
              "No"
            ],
            "items": {
              "description": "The values to display as potential answers for a question. Values can only be \nprovided for boolean, single-selct or multi-select question types.",
              "uniqueItems": true,
              "maxItems": 16,
              "type": "string"
            }
          },
          "allowOther": {
            "type": "boolean",
            "description": "Indicates whether an 'Other' choice should be presented as part of a \nsingle-select or multi-select option list. This must be false for all other \nquestion types.",
            "default": false
          }
        }
      },
      "QuestionData": {
        "type": "object",
        "description": "Defines the content that can be provided when creating a question.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionContent"
          }
        ]
      },
      "QuestionBasicViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for a question.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionIdData"
          },
          {
            "$ref": "#/components/schemas/QuestionBasicContent"
          }
        ]
      },
      "QuestionViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for a question.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionIdData"
          },
          {
            "$ref": "#/components/schemas/QuestionContent"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      },
      "QuestionnaireIdData": {
        "type": "object",
        "description": "The identifier of a questionnaire.",
        "required": [
          "questionnaireId"
        ],
        "properties": {
          "questionnaireId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of the questionnaire",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "QuestionnaireContent": {
        "type": "object",
        "description": "Defines the content to use when creating or modifying a questionnaire.",
        "required": [
          "description",
          "questions"
        ],
        "properties": {
          "description": {
            "type": "string",
            "example": "Check-in questions for 2020 event"
          },
          "questions": {
            "type": "array",
            "minLength": 1,
            "maxLength": 32,
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/QuestionIdData"
            }
          },
          "associatedEvents": {
            "type": "array",
            "maxLength": 32,
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/EventId"
            }
          }
        }
      },
      "QuestionnaireData": {
        "type": "object",
        "description": "Defines the content that can be provided when creating a questionnaire.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionnaireContent"
          }
        ]
      },
      "QuestionnaireViewContent": {
        "type": "object",
        "description": "Defines the content to use when creating or modifying a questionnaire.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionnaireContent"
          }
        ]
      },
      "QuestionnaireBasicViewData": {
        "type": "object",
        "description": "Defines the basic read-only content retrieved for a questionnaire.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionnaireIdData"
          },
          {
            "$ref": "#/components/schemas/QuestionnaireContent"
          }
        ],
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version of the questionnaire.",
            "readOnly": true,
            "minimum": 1,
            "example": 3
          }
        }
      },
      "QuestionnaireViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for a questionnaire.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionnaireIdData"
          },
          {
            "$ref": "#/components/schemas/QuestionnaireViewContent"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ],
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version of the questionnaire.",
            "readOnly": true,
            "minimum": 1,
            "example": 3
          }
        }
      },
      "CheckInIdData": {
        "type": "object",
        "description": "The identifier of a check-in.",
        "required": [
          "checkInId"
        ],
        "properties": {
          "checkInId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of the questionnaire",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "QuestionResponse": {
        "type": "object",
        "description": "The response to a question",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionIdData"
          }
        ],
        "required": [
          "responses"
        ],
        "properties": {
          "additionalValue": {
            "type": "boolean",
            "description": "Indicates whether the answer provided was an additional (user-provided) value not in the original options.",
            "default": false,
            "example": true
          },
          "responses": {
            "type": "array",
            "maximum": 16,
            "minimum": 1,
            "example": [
              "Things are going..."
            ],
            "items": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          }
        }
      },
      "CheckInData": {
        "type": "object",
        "description": "Defines the content to use when creating a check-in.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionnaireIdData"
          },
          {
            "$ref": "#/components/schemas/EntityId"
          }
        ],
        "required": [
          "questionnaireVersion",
          "contact"
        ],
        "properties": {
          "questionnaireVersion": {
            "type": "integer",
            "description": "The version of the questionnaire.",
            "minimum": 1,
            "example": 3
          },
          "events": {
            "type": "array",
            "maxLength": 32,
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/EventId"
            }
          },
          "answeredQuestions": {
            "type": "array",
            "minLength": 1,
            "maxLength": 32,
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/QuestionResponse"
            }
          }
        }
      },
      "CheckInViewData": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckInIdData"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          },
          {
            "$ref": "#/components/schemas/CheckInData"
          }
        ],
        "required": [
          "creatorEmail"
        ],
        "properties": {
          "creatorEmail": {
            "type": "string",
            "format": "email",
            "description": "The e-mail address of the user who performed the check-in.",
            "example": "ned.flanders@example.com"
          }
        }
      }
    }
  }
}