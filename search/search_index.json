{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bmore-Responsive Wiki Home What is Bmore-Responsive? A simple, flexible API to support emergency response coordination. Sample use cases include: keeping track of local nursing home status and needs during a global pandemic identifying hospitals lacking power during a natural disaster assuring safety of hikers in a national park during a snow storm This system will make use of digital services and modern methodologies to automate and simplify parts of the check-in process to help the municipality prioritize its call/check-in list and response plan. Additionally, the system will validate contact information regularly during non-emergency times to ensure the municipality has the most up-to-date information for each entity. What does it do? Bmore-Responsive provides the following primary features via a secure REST API: Maintain set of Entities (could be hospitals, nursing homes, campers, etc) Maintain set of Contacts for Entities (people who can provide status/need info for entities) Capture of status/need information about Entities User account and role management to enable secure authentication and authorization Export of any data via CSV How do I use it? You can begin using Bmore-Responsive in minutes by following our the steps in the Quick Start Guide . If you have more advanced installation/configuration needs take a look at out Slow Start Guide . Once you've installed the app, check out the How To Use Guide to understand the use the API directly or integrate a front end application. How is it built? Can I contribute? Bmore-Responsive is an Open Source project developed mostly in node.js. You are welcome to fork the repo to customize for your own needs, but we'd welcome contributions to improve Bmore Responsive directly. For more technical detail on the solution and guidance on contributing, please see our Developers' Guide . Maintained by CodeForBaltimore and supported by CodeForAmerica","title":"Home"},{"location":"#bmore-responsive-wiki-home","text":"","title":"Bmore-Responsive Wiki Home"},{"location":"#what-is-bmore-responsive","text":"A simple, flexible API to support emergency response coordination. Sample use cases include: keeping track of local nursing home status and needs during a global pandemic identifying hospitals lacking power during a natural disaster assuring safety of hikers in a national park during a snow storm This system will make use of digital services and modern methodologies to automate and simplify parts of the check-in process to help the municipality prioritize its call/check-in list and response plan. Additionally, the system will validate contact information regularly during non-emergency times to ensure the municipality has the most up-to-date information for each entity.","title":"What is Bmore-Responsive?"},{"location":"#what-does-it-do","text":"Bmore-Responsive provides the following primary features via a secure REST API: Maintain set of Entities (could be hospitals, nursing homes, campers, etc) Maintain set of Contacts for Entities (people who can provide status/need info for entities) Capture of status/need information about Entities User account and role management to enable secure authentication and authorization Export of any data via CSV","title":"What does it do?"},{"location":"#how-do-i-use-it","text":"You can begin using Bmore-Responsive in minutes by following our the steps in the Quick Start Guide . If you have more advanced installation/configuration needs take a look at out Slow Start Guide . Once you've installed the app, check out the How To Use Guide to understand the use the API directly or integrate a front end application.","title":"How do I use it?"},{"location":"#how-is-it-built-can-i-contribute","text":"Bmore-Responsive is an Open Source project developed mostly in node.js. You are welcome to fork the repo to customize for your own needs, but we'd welcome contributions to improve Bmore Responsive directly. For more technical detail on the solution and guidance on contributing, please see our Developers' Guide . Maintained by CodeForBaltimore and supported by CodeForAmerica","title":"How is it built? Can I contribute?"},{"location":"Code_of_Conduct/","text":"Code for Baltimore Code of Conduct Derived from Code for America's Code of Conduct The Code for America community expects that Code for America network activities, events, and digital forums: Are a safe and respectful environment for all participants. Are a place where people are free to fully express their identities. Presume the value of others. Everyone's ideas, skills, and contributions have value. Don't assume everyone has the same context, and encourage questions. Find a way for people to be productive with their skills (technical and not) and energy. Use language such as \"yes/and\", not \"no/but.\" Encourage members and participants to listen as much as they speak. Strive to build tools that are open and free technology for public use. Activities that aim to foster public use, not private gain, are prioritized. Prioritize access for and input from those who are traditionally excluded from the civic process. Work to ensure that the community is well-represented in the planning, design, and implementation of civic tech. This includes encouraging participation from women, minorities, and traditionally marginalized groups. Actively involve community groups and those with subject matter expertise in the decision-making process. Ensure that the relationships and conversations between community members, the local government staff and community partners remain respectful, participatory, and productive. Provide an environment where people are free from discrimination or harassment. Code for America reserves the right to ask anyone in violation of these policies not to participate in Code for America network activities, events, and digital forums. Code for America's Anti-Harassment Policy This anti-harassment policy is based on the example policy from the Geek Feminism wiki, created by the Ada Initiative and other volunteers. This policy is based on several other policies, including the Ohio LinuxFest anti-harassment policy, written by Esther Filderman and Beth Lynn Eicher, and the Con Anti-Harassment Project. Mary Gardiner, Valerie Aurora, Sarah Smith, and Donna Benjamin generalized the policies and added supporting material. Many members of LinuxChix, Geek Feminism and other groups contributed to this work. All Code for America network activities, events, and digital forums and their staff, presenters, and participants are held to an anti-harassment policy, included below. In addition to governing our own events by this policy, Code for America will only lend our brand and fund groups that offer an anti-harassment policy to their attendees. For information on how to offer an anti-harassment policy to your group, see this guide . Code for America is dedicated to providing a harassment-free experience for everyone regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, or religion. We do not tolerate harassment of staff, presenters, and participants in any form. Sexual language and imagery is not appropriate for any Code for America event or network activity, including talks. Anyone in violation of these policies may expelled from Code for America network activities, events, and digital forums, at the discretion of the event organizer or forum administrator. Harassment includes but is not limited to: offensive verbal or written comments related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, religion; sexual images in public spaces; deliberate intimidation; stalking; following; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; unwelcome sexual attention; unwarranted exclusion; and patronizing language or action. If a participant engages in harassing behavior, the organizers may take any action they deem appropriate, including warning the offender or expulsion from Code for America network activities, events, and digital forums. If you are being harassed, notice that someone else is being harassed, or have any other concerns, please contact a member of the event staff or forum administrator immediately. Event staff or forum administrators will be happy to help participants contact hotel/venue security or local law enforcement, provide escorts, or otherwise assist those experiencing harassment to feel safe for the duration of the event. If you cannot reach an event organizer or forum administrator and/or it is an emergency, please call 911 and/or remove yourself from the situation. You can also contact Code for America about harassment at safespace@codeforamerica.org and feel free to use the email template below. Code for America staff acknowledge that we are not always in a position to evaluate a given situation due to the number of events and the fact that our team is not always present. However, we are hopeful that by providing these guidelines we are establishing a community that jointly adheres to these values and can provide an environment that is welcoming to all. We value your attendance and hope that by communicating these expectations widely we can all enjoy a harassment-free environment. Email Template for Anti-Harassment Reporting SUBJECT: Safe Space alert at [EVENT NAME] I am writing because of harassment at a Code for America Communities event, (NAME, PLACE, DATE OF EVENT). You can reach me at (CONTACT INFO). Thank you.","title":"Code of Conduct"},{"location":"Code_of_Conduct/#code-for-baltimore-code-of-conduct","text":"","title":"Code for Baltimore Code of Conduct"},{"location":"Code_of_Conduct/#derived-from-code-for-americas-code-of-conduct","text":"The Code for America community expects that Code for America network activities, events, and digital forums: Are a safe and respectful environment for all participants. Are a place where people are free to fully express their identities. Presume the value of others. Everyone's ideas, skills, and contributions have value. Don't assume everyone has the same context, and encourage questions. Find a way for people to be productive with their skills (technical and not) and energy. Use language such as \"yes/and\", not \"no/but.\" Encourage members and participants to listen as much as they speak. Strive to build tools that are open and free technology for public use. Activities that aim to foster public use, not private gain, are prioritized. Prioritize access for and input from those who are traditionally excluded from the civic process. Work to ensure that the community is well-represented in the planning, design, and implementation of civic tech. This includes encouraging participation from women, minorities, and traditionally marginalized groups. Actively involve community groups and those with subject matter expertise in the decision-making process. Ensure that the relationships and conversations between community members, the local government staff and community partners remain respectful, participatory, and productive. Provide an environment where people are free from discrimination or harassment. Code for America reserves the right to ask anyone in violation of these policies not to participate in Code for America network activities, events, and digital forums.","title":"Derived from Code for America's Code of Conduct"},{"location":"Code_of_Conduct/#code-for-americas-anti-harassment-policy","text":"This anti-harassment policy is based on the example policy from the Geek Feminism wiki, created by the Ada Initiative and other volunteers. This policy is based on several other policies, including the Ohio LinuxFest anti-harassment policy, written by Esther Filderman and Beth Lynn Eicher, and the Con Anti-Harassment Project. Mary Gardiner, Valerie Aurora, Sarah Smith, and Donna Benjamin generalized the policies and added supporting material. Many members of LinuxChix, Geek Feminism and other groups contributed to this work. All Code for America network activities, events, and digital forums and their staff, presenters, and participants are held to an anti-harassment policy, included below. In addition to governing our own events by this policy, Code for America will only lend our brand and fund groups that offer an anti-harassment policy to their attendees. For information on how to offer an anti-harassment policy to your group, see this guide . Code for America is dedicated to providing a harassment-free experience for everyone regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, or religion. We do not tolerate harassment of staff, presenters, and participants in any form. Sexual language and imagery is not appropriate for any Code for America event or network activity, including talks. Anyone in violation of these policies may expelled from Code for America network activities, events, and digital forums, at the discretion of the event organizer or forum administrator. Harassment includes but is not limited to: offensive verbal or written comments related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, religion; sexual images in public spaces; deliberate intimidation; stalking; following; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; unwelcome sexual attention; unwarranted exclusion; and patronizing language or action. If a participant engages in harassing behavior, the organizers may take any action they deem appropriate, including warning the offender or expulsion from Code for America network activities, events, and digital forums. If you are being harassed, notice that someone else is being harassed, or have any other concerns, please contact a member of the event staff or forum administrator immediately. Event staff or forum administrators will be happy to help participants contact hotel/venue security or local law enforcement, provide escorts, or otherwise assist those experiencing harassment to feel safe for the duration of the event. If you cannot reach an event organizer or forum administrator and/or it is an emergency, please call 911 and/or remove yourself from the situation. You can also contact Code for America about harassment at safespace@codeforamerica.org and feel free to use the email template below. Code for America staff acknowledge that we are not always in a position to evaluate a given situation due to the number of events and the fact that our team is not always present. However, we are hopeful that by providing these guidelines we are establishing a community that jointly adheres to these values and can provide an environment that is welcoming to all. We value your attendance and hope that by communicating these expectations widely we can all enjoy a harassment-free environment.","title":"Code for America's Anti-Harassment Policy"},{"location":"Code_of_Conduct/#email-template-for-anti-harassment-reporting","text":"SUBJECT: Safe Space alert at [EVENT NAME] I am writing because of harassment at a Code for America Communities event, (NAME, PLACE, DATE OF EVENT). You can reach me at (CONTACT INFO). Thank you.","title":"Email Template for Anti-Harassment Reporting"},{"location":"DevIntro/","text":"Wanna improve Bmore Responsive? This page will provide an introduction the to the architecture, implementation and processes of Bmore Responsive. Components This application will be broken down into several components. Each will be outlined here. Application Architecture The overall application will have several components in support of the code. These will facilitate secure communication between any front end, our API, and the data layer. Additionally our architecture will be designed to be scalable for instances of heavy load. API The API is the application for all intents and purposes. Use of the API and possible paths of use are defined in the flowchart below. CI/CD We will use TravisCI, Docker, Netlify, and AWS to provide constant code deployments and test coverage. Data This product makes use of PostgreSQL for the data layer and Sequelize for database interactions. Our database documentation can be found in the /sequelize directory. The schema is outlined below Migrations Migrations are the scripts to create tables and initialize the database. Migrations can be written to run after the initial migration takes place. It is important to note that the migrations run in sequential order, so using a numbering system is important. It is also important to note that FK columns and relationships can be and should be defined as their own migrations. This is to prevent errors of columns being created when the parent table no longer exists. Individual migrations can be reverted as per the Sequelize documentation. Data Seeders A seeder is a script to seed a particular set of data. As with Migrations these scripts run in order, so numbering is important. Because of FK constraints it is again important to note when data is seeded to prevent errors with FK constraints. Imports can be chained in a single seed script, and this may be useful and advised for seeded data that is related through a FK. To create new models, migrations, and seeders you must use the Sequelize CLI commands. Full documentation is here https://sequelize.org/master/manual/migrations.html but here are a few useful commands: npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string - Creates a model under /src/models and a migration script. npx sequelize-cli seed:generate --name demo-user - Creates a seeder for the User model and migration previously setup. NPM commands This repo has simplified a few of the Sequelize CLI options that would be commonly used by this project. npm run db-create will create the database and run all migrations. npm run db-delete will delete all tables and revert all migrations. npm run db-seed will run all seeders and populate all data. npm run db-unseed will delete all data in all tables and revert all seeders. Role and Access Mgmt User role management is being handled by Casbin . To facilitate this our migrations and seeding will replicate the casbin_rule table that would be generated by the casbin-sequelize package. We are then seeding as normal, however the field names are not straight-forward. They are defined as follows: role = The plain-text name of the role. Example: admin path = The path the role has access to. Example: /user method = The http method that can be hit. Example GET For use and management of roles after seeding, please refer to the API spec or Casbin Node.js documentation.","title":"Solution Overview"},{"location":"DevIntro/#components","text":"This application will be broken down into several components. Each will be outlined here.","title":"Components"},{"location":"DevIntro/#application-architecture","text":"The overall application will have several components in support of the code. These will facilitate secure communication between any front end, our API, and the data layer. Additionally our architecture will be designed to be scalable for instances of heavy load.","title":"Application Architecture"},{"location":"DevIntro/#api","text":"The API is the application for all intents and purposes. Use of the API and possible paths of use are defined in the flowchart below.","title":"API"},{"location":"DevIntro/#cicd","text":"We will use TravisCI, Docker, Netlify, and AWS to provide constant code deployments and test coverage.","title":"CI/CD"},{"location":"DevIntro/#data","text":"This product makes use of PostgreSQL for the data layer and Sequelize for database interactions. Our database documentation can be found in the /sequelize directory. The schema is outlined below","title":"Data"},{"location":"DevIntro/#migrations","text":"Migrations are the scripts to create tables and initialize the database. Migrations can be written to run after the initial migration takes place. It is important to note that the migrations run in sequential order, so using a numbering system is important. It is also important to note that FK columns and relationships can be and should be defined as their own migrations. This is to prevent errors of columns being created when the parent table no longer exists. Individual migrations can be reverted as per the Sequelize documentation.","title":"Migrations"},{"location":"DevIntro/#data-seeders","text":"A seeder is a script to seed a particular set of data. As with Migrations these scripts run in order, so numbering is important. Because of FK constraints it is again important to note when data is seeded to prevent errors with FK constraints. Imports can be chained in a single seed script, and this may be useful and advised for seeded data that is related through a FK. To create new models, migrations, and seeders you must use the Sequelize CLI commands. Full documentation is here https://sequelize.org/master/manual/migrations.html but here are a few useful commands: npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string - Creates a model under /src/models and a migration script. npx sequelize-cli seed:generate --name demo-user - Creates a seeder for the User model and migration previously setup.","title":"Data Seeders"},{"location":"DevIntro/#npm-commands","text":"This repo has simplified a few of the Sequelize CLI options that would be commonly used by this project. npm run db-create will create the database and run all migrations. npm run db-delete will delete all tables and revert all migrations. npm run db-seed will run all seeders and populate all data. npm run db-unseed will delete all data in all tables and revert all seeders.","title":"NPM commands"},{"location":"DevIntro/#role-and-access-mgmt","text":"User role management is being handled by Casbin . To facilitate this our migrations and seeding will replicate the casbin_rule table that would be generated by the casbin-sequelize package. We are then seeding as normal, however the field names are not straight-forward. They are defined as follows: role = The plain-text name of the role. Example: admin path = The path the role has access to. Example: /user method = The http method that can be hit. Example GET For use and management of roles after seeding, please refer to the API spec or Casbin Node.js documentation.","title":"Role and Access Mgmt"},{"location":"HowToContribute/","text":"Welcome The CodeForBaltimore team is thrilled that you might be interested in helping us help others! You do not need to be an expert, just willing to help. This page will give you some background on this project with suggestion and advice on how to contribute. What is Bmore Responsive? A simple, flexible API to support emergency response coordination. Sample use cases include: Keeping track of local nursing home status and needs during a global pandemic Identifying hospitals lacking power during a natural disaster Assuring safety of hikers in a national park during a snow storm This system will make use of digital services and modern methodologies to automate and simplify parts of the check-in process to help the municipality prioritize its call/check-in list and response plan. Additionally, the system will validate contact information regularly during non-emergency times to ensure the municipality has the most up-to-date information for each entity. What Bmore Responsive Isn't? In order to stay focus on its primary goals, Bmore Responsive is not intended to: Be a front-end website or app Provide statistical or analytical endpoints Be a robust questionnaire design tool Roadmap The project team uses a User Story Map to identify feature planned for future development. Here's our latest story map: Bmore Responsive User Story Map Additionally, we have an API Roadmap page in our GitHub wiki describing plans for the next major version of this API. Current Work and Help Needed We use GitHub issues to define and manage our work. The list of open issues describes the work that is currently on our plate. These issues include work that is being done as well as enhancements and defect fixes that need help. GitHub milestones are occasionally used to represent features from the story map. Often several issues (user stories, bugs, tasks, etc) will be related to one feature. By relating these issues to a milestone, it makes it easy to view/track progress toward features on the story map. If you are looking to help, we recommend that you review the issues listed to identify an opportunity to contribute. You are also free to create an issue to suggest a change. Keep an eye on the labels associated with each issue. The labels will typically indicate the type and importance of the work. Some commonly used labels and their meanings are: good first issue is a relatively simple issue appropriate for someone new to the project P1 , P2 , P3 each describe priority with P1 being the most urgent bug is a defect that needs to be fixed enhancement is a new valuable new feature Technology and Code This project will make exclusive use of open-source software, packages, and contributions. The application is built with the following technologies: Javascript (ES6) Node.js Express.js Sequelize Casbin Docker Terraform Postman Please see our Developer Intro for a full breakdown of the architecture of the projects and important scripts. Contributing Git Workflow Here's a summary of the steps needed to the Bmore Responsive repo: First fork then this repo Clone the forked repo locally Add a remote that points to the original repo and name it upstream. Manually sync up with upstream by running get fetch upstream followed by git status to take a look. If necessary, pull in any changes. Create a branch off of master and start coding (see Naming Branches ) Add, commit, and push up the branch (to your fork). Check for any merge conflicts or unintended changes between your branch and the original repo's master branch. If it looks good, create a pull request. If you are new to GitHub and/or this workflow there is a great, brief tutorial on Egghead . Naming Branches Branch names should follow this pattern: your github username /issue- github issue number . This will ensure there are no branch name conflicts, and anyone looking for your branch will know what it is called based on the issue addressed. For example if your username was letsGoOs , and you were working on issue 8, then your branch name would be letsGoOs/issue-8 . If you wanted to make a new branch to continue your work on your issue then add a suffix with an incremented number. To continue the previous example if you wanted to make a second branch for your issue 8 work your second branch would be called letsGoOs/issue-8-2 . Definition of Done Before any issue can be considered done and marked resolved, the following conditions must be met: All Acceptance criteria listed in the issue are fulfilled The Postman collection on the branch passes all tests The Swagger doc completely and accurately aligns with the implementation of the API All documentation, especially wiki pages in /docs/*.md , aligns with updated code/solution All unit tests pass Unit test coverage, as measured by Codecov, is 80% No medium or major security vulnerabilities Code Quality Standards Regardless of Language: Default to lowerCamelCase naming convention Use static code analysis tools to improve code quality and consistency Code modifications within a repository should be performed on a branch, that will be merged to master via a pull request once approved. Provide meaningful code comments All commits must include a useful commit message Style Guides Consistent style guidelines for each language should be used. Where possible, openly published standards by authorities providing or using the language will be used. Example: Google has openly published style guides for many languages in wide use on their open source projects, and these can be adopted for use in this project: Google Language Specific Styleguides Contact Us The best ways to get in touch with us is via our Slack workspace . You can also reach out to our tech lead Jason Anton via email at jason@codeforbaltimore.org or our delivery lead Bill Lakenan via email at bill@codeforbaltimore.org CodeForBaltimore welcomes anyone who is interested in helping with this project. You do not have to be an expert developer or located anywhere near Baltimore. Hit us up on Slack and let's talk. Please note we have a Code of Conduct , please follow it in all your interactions with the project. Sources and Links We are also building a front-end application called Healthcare Rollcall to interact with this backend API. We welcome interest and contributions to both repos.","title":"How to Contribute"},{"location":"HowToContribute/#welcome","text":"The CodeForBaltimore team is thrilled that you might be interested in helping us help others! You do not need to be an expert, just willing to help. This page will give you some background on this project with suggestion and advice on how to contribute.","title":"Welcome"},{"location":"HowToContribute/#what-is-bmore-responsive","text":"A simple, flexible API to support emergency response coordination. Sample use cases include: Keeping track of local nursing home status and needs during a global pandemic Identifying hospitals lacking power during a natural disaster Assuring safety of hikers in a national park during a snow storm This system will make use of digital services and modern methodologies to automate and simplify parts of the check-in process to help the municipality prioritize its call/check-in list and response plan. Additionally, the system will validate contact information regularly during non-emergency times to ensure the municipality has the most up-to-date information for each entity.","title":"What is Bmore Responsive?"},{"location":"HowToContribute/#what-bmore-responsive-isnt","text":"In order to stay focus on its primary goals, Bmore Responsive is not intended to: Be a front-end website or app Provide statistical or analytical endpoints Be a robust questionnaire design tool","title":"What Bmore Responsive Isn't?"},{"location":"HowToContribute/#roadmap","text":"The project team uses a User Story Map to identify feature planned for future development. Here's our latest story map: Bmore Responsive User Story Map Additionally, we have an API Roadmap page in our GitHub wiki describing plans for the next major version of this API.","title":"Roadmap"},{"location":"HowToContribute/#current-work-and-help-needed","text":"We use GitHub issues to define and manage our work. The list of open issues describes the work that is currently on our plate. These issues include work that is being done as well as enhancements and defect fixes that need help. GitHub milestones are occasionally used to represent features from the story map. Often several issues (user stories, bugs, tasks, etc) will be related to one feature. By relating these issues to a milestone, it makes it easy to view/track progress toward features on the story map. If you are looking to help, we recommend that you review the issues listed to identify an opportunity to contribute. You are also free to create an issue to suggest a change. Keep an eye on the labels associated with each issue. The labels will typically indicate the type and importance of the work. Some commonly used labels and their meanings are: good first issue is a relatively simple issue appropriate for someone new to the project P1 , P2 , P3 each describe priority with P1 being the most urgent bug is a defect that needs to be fixed enhancement is a new valuable new feature","title":"Current Work and Help Needed"},{"location":"HowToContribute/#technology-and-code","text":"This project will make exclusive use of open-source software, packages, and contributions. The application is built with the following technologies: Javascript (ES6) Node.js Express.js Sequelize Casbin Docker Terraform Postman Please see our Developer Intro for a full breakdown of the architecture of the projects and important scripts.","title":"Technology and Code"},{"location":"HowToContribute/#contributing","text":"","title":"Contributing"},{"location":"HowToContribute/#git-workflow","text":"Here's a summary of the steps needed to the Bmore Responsive repo: First fork then this repo Clone the forked repo locally Add a remote that points to the original repo and name it upstream. Manually sync up with upstream by running get fetch upstream followed by git status to take a look. If necessary, pull in any changes. Create a branch off of master and start coding (see Naming Branches ) Add, commit, and push up the branch (to your fork). Check for any merge conflicts or unintended changes between your branch and the original repo's master branch. If it looks good, create a pull request. If you are new to GitHub and/or this workflow there is a great, brief tutorial on Egghead .","title":"Git Workflow"},{"location":"HowToContribute/#naming-branches","text":"Branch names should follow this pattern: your github username /issue- github issue number . This will ensure there are no branch name conflicts, and anyone looking for your branch will know what it is called based on the issue addressed. For example if your username was letsGoOs , and you were working on issue 8, then your branch name would be letsGoOs/issue-8 . If you wanted to make a new branch to continue your work on your issue then add a suffix with an incremented number. To continue the previous example if you wanted to make a second branch for your issue 8 work your second branch would be called letsGoOs/issue-8-2 .","title":"Naming Branches"},{"location":"HowToContribute/#definition-of-done","text":"Before any issue can be considered done and marked resolved, the following conditions must be met: All Acceptance criteria listed in the issue are fulfilled The Postman collection on the branch passes all tests The Swagger doc completely and accurately aligns with the implementation of the API All documentation, especially wiki pages in /docs/*.md , aligns with updated code/solution All unit tests pass Unit test coverage, as measured by Codecov, is 80% No medium or major security vulnerabilities","title":"Definition of Done"},{"location":"HowToContribute/#code-quality-standards","text":"Regardless of Language: Default to lowerCamelCase naming convention Use static code analysis tools to improve code quality and consistency Code modifications within a repository should be performed on a branch, that will be merged to master via a pull request once approved. Provide meaningful code comments All commits must include a useful commit message","title":"Code Quality Standards"},{"location":"HowToContribute/#style-guides","text":"Consistent style guidelines for each language should be used. Where possible, openly published standards by authorities providing or using the language will be used. Example: Google has openly published style guides for many languages in wide use on their open source projects, and these can be adopted for use in this project: Google Language Specific Styleguides","title":"Style Guides"},{"location":"HowToContribute/#contact-us","text":"The best ways to get in touch with us is via our Slack workspace . You can also reach out to our tech lead Jason Anton via email at jason@codeforbaltimore.org or our delivery lead Bill Lakenan via email at bill@codeforbaltimore.org CodeForBaltimore welcomes anyone who is interested in helping with this project. You do not have to be an expert developer or located anywhere near Baltimore. Hit us up on Slack and let's talk. Please note we have a Code of Conduct , please follow it in all your interactions with the project.","title":"Contact Us"},{"location":"HowToContribute/#sources-and-links","text":"We are also building a front-end application called Healthcare Rollcall to interact with this backend API. We welcome interest and contributions to both repos.","title":"Sources and Links"},{"location":"HowToUse/","text":"API Spec The Bmore Responsive API is documented via a OAS 3.0 API specification in the file swagger.json . This API spec lists all the endpoints, supported REST actions, and the request and response data formats. While you can open the swagger.json file in any text editor, there are better ways to view it in a richer format, such as: View the API Spec on Swaggerhub If you are running Bmore Responsive, then you can just point your browser at the root URL of your server, often http://localhost:3001/ , you'll be redirected to http://localhost:3001/api-docs/ Postman Collection For a library of sample API calls, please refer to the Postman collection Bmore-Responsive.postman_collection.json . Need Postman? Click here . Authentication The Bmore Responsive API provides security by limiting use of nearly all features to authenticated users. If you have NOT disabled login, you'll need to pass a JSON Web Token (JWT) with every call to a secured endpoint. Only the login ( /user/login ) and health ( /health ) endpoints are unsecured. To get a JWT, you'll need to pass a valid username and password to /user/login ; the encoded JWT is the response body. This JWT should be passed as the Authorization header using the Bearer authentication scheme . This token will expire after a short period of time. If it expires, you can get a new token by making another call to user/login . Note: If you have used the db-seed script, you'll already have a user account created that will enable you to login. This default login is username homer.simpson@sfpp.com and password donuts . Seed and re-seed the database This repo has four scripts that simplifies the creation and loading of the database. These script commands are as follows: npm run db-create will create the database and run all migrations. npm run db-delete will delete all tables and revert all migrations. npm run db-seed will run all seeders and populate database with random, Simpsons-like data. npm run db-unseed will delete all data in all tables and revert all seeders.","title":"Users Guide"},{"location":"HowToUse/#api-spec","text":"The Bmore Responsive API is documented via a OAS 3.0 API specification in the file swagger.json . This API spec lists all the endpoints, supported REST actions, and the request and response data formats. While you can open the swagger.json file in any text editor, there are better ways to view it in a richer format, such as: View the API Spec on Swaggerhub If you are running Bmore Responsive, then you can just point your browser at the root URL of your server, often http://localhost:3001/ , you'll be redirected to http://localhost:3001/api-docs/","title":"API Spec"},{"location":"HowToUse/#postman-collection","text":"For a library of sample API calls, please refer to the Postman collection Bmore-Responsive.postman_collection.json . Need Postman? Click here .","title":"Postman Collection"},{"location":"HowToUse/#authentication","text":"The Bmore Responsive API provides security by limiting use of nearly all features to authenticated users. If you have NOT disabled login, you'll need to pass a JSON Web Token (JWT) with every call to a secured endpoint. Only the login ( /user/login ) and health ( /health ) endpoints are unsecured. To get a JWT, you'll need to pass a valid username and password to /user/login ; the encoded JWT is the response body. This JWT should be passed as the Authorization header using the Bearer authentication scheme . This token will expire after a short period of time. If it expires, you can get a new token by making another call to user/login . Note: If you have used the db-seed script, you'll already have a user account created that will enable you to login. This default login is username homer.simpson@sfpp.com and password donuts .","title":"Authentication"},{"location":"HowToUse/#seed-and-re-seed-the-database","text":"This repo has four scripts that simplifies the creation and loading of the database. These script commands are as follows: npm run db-create will create the database and run all migrations. npm run db-delete will delete all tables and revert all migrations. npm run db-seed will run all seeders and populate database with random, Simpsons-like data. npm run db-unseed will delete all data in all tables and revert all seeders.","title":"Seed and re-seed the database"},{"location":"QuickStart/","text":"Quick Start This brief guide will get you up and running your own copy of Bmore Responsive with sample data so you can get familiar with the solution by using it directly. The approach below is just one way to get Bmore Responsive running. For other approaches and more detail on configuration, please see the Slow Start Guide section of the Users' Guide. Step 0 - Download code from github We're assuming that you've cloned or downloaded the contents of the Bmore Responsive repository on GitHub . Step 1 - Install Required Software In order to follow this quick start guide you'll need to make sure you have the following software installed on your machine: Docker Desktop with DockerHub access - Docker is not technically required to run BMore Responsive, but this guide uses Docker to get up and running quickly. You can confirm that you have Docker Desktop by executing docker -v at a command line. If your machine replies with a version number like Docker version 19.03.8, build afaca4b then you have Docker Desktop installed. If you need to install Docker Desktop, head on over to the Docker Desktop page . Step 2 - Configure Your Environment Add the following to a file named .env in your project directory: DATABASE_PASSWORD= # Custom value JWT_KEY= # Custom value DATABASE_PASSWORD : The password used to authenticate to the postgres database. For security, use a custom value. JWT_KEY : A secret value to generate JSON Web Tokens (JWTs) locally. For security, use a custom value. Step 4 - Run Development Stack To run the application run docker-compose up -d --build . Step 5 - Confirm Success To confirm the server is running, just point your browser to http://localhost:3001/entity . A response like the sample below lets you know your server is healthy. { _meta : { total : 25 }, results : [ { id : 376fb5a1-d8fe-42ce-9492-cca41148ff1a , name : The Leftorium , type : Test , address : { street : [ 123 Anyplace St. ], ... } ] } Congratulations! Why not check out the \"How to Use\" guide and learn more by using Bmore Responsive. When done, you can shut everything down with docker-compose down .","title":"Quick Start - Less than 10 min"},{"location":"QuickStart/#quick-start","text":"This brief guide will get you up and running your own copy of Bmore Responsive with sample data so you can get familiar with the solution by using it directly. The approach below is just one way to get Bmore Responsive running. For other approaches and more detail on configuration, please see the Slow Start Guide section of the Users' Guide.","title":"Quick Start"},{"location":"QuickStart/#step-0-download-code-from-github","text":"We're assuming that you've cloned or downloaded the contents of the Bmore Responsive repository on GitHub .","title":"Step 0 - Download code from github"},{"location":"QuickStart/#step-1-install-required-software","text":"In order to follow this quick start guide you'll need to make sure you have the following software installed on your machine: Docker Desktop with DockerHub access - Docker is not technically required to run BMore Responsive, but this guide uses Docker to get up and running quickly. You can confirm that you have Docker Desktop by executing docker -v at a command line. If your machine replies with a version number like Docker version 19.03.8, build afaca4b then you have Docker Desktop installed. If you need to install Docker Desktop, head on over to the Docker Desktop page .","title":"Step 1 - Install Required Software"},{"location":"QuickStart/#step-2-configure-your-environment","text":"Add the following to a file named .env in your project directory: DATABASE_PASSWORD= # Custom value JWT_KEY= # Custom value DATABASE_PASSWORD : The password used to authenticate to the postgres database. For security, use a custom value. JWT_KEY : A secret value to generate JSON Web Tokens (JWTs) locally. For security, use a custom value.","title":"Step 2 - Configure Your Environment"},{"location":"QuickStart/#step-4-run-development-stack","text":"To run the application run docker-compose up -d --build .","title":"Step 4 - Run Development Stack"},{"location":"QuickStart/#step-5-confirm-success","text":"To confirm the server is running, just point your browser to http://localhost:3001/entity . A response like the sample below lets you know your server is healthy. { _meta : { total : 25 }, results : [ { id : 376fb5a1-d8fe-42ce-9492-cca41148ff1a , name : The Leftorium , type : Test , address : { street : [ 123 Anyplace St. ], ... } ] } Congratulations! Why not check out the \"How to Use\" guide and learn more by using Bmore Responsive. When done, you can shut everything down with docker-compose down .","title":"Step 5 - Confirm Success"},{"location":"SlowStart/","text":"Slow Start If you want to tweak the installation of Bmore Responsive or have a different environment, then this page will provide additional detail on how to install/configure Bmore Responsive. Configuring via Environment variables Regardless of where you are running the system, environment variables to run this application. These variables are set in the .env file on the root directory of Bmore Responsive. Environment Variables NODE_ENV : The label for your environment. It can be anything you want and will allow you to differentiate multiple instances. Default: development . PORT : The local port you wish to run on. Default: 3001 . DATABASE_HOST : The database host PostgreSQL is running on, which can be specified as a (sub)domain or IP address. Default: db (for docker-compose Postgres instance). DATABASE_PORT : The database port PostgreSQL is running on. Default: 5432 . DATABASE_NAME : The name of the PostgreSQL database to connect to. Default: postgres . DATABASE_SCHEMA : Your local database schema. Default: public . DATABASE_USERNAME : The username for connecting to PostgreSQL. Default: postgres . DATABASE_PASSWORD : The password for connecting to PostgreSQL. JWT_KEY : A secret value to generate JSON Web Tokens (JWTs) locally. SMTP_HOST : optional Hostname for the SMTP server used to send notification emails SMTP_PORT : optional Port number for the SMTP server used to send notification emails SMTP_USER : optional Username for the SMTP server used to send notification emails SMTP_PASSWORD : optional Password for the SMTP server used to send notification emails BYPASS_LOGIN : optional Allows you to hit the endpoints locally without having to login. If you wish to bypass the login process during local dev, set this to true . Default: true . Note: at the moment, login will be bypassed if this variable simply exists in the .env file. Even BYPASS_LOGIN = false will remove the need to login. To require login, simply remove mention of this variable from this file. We do not recommend using the default options for PostgreSQL. The above values are provided as examples. It is more secure to create your own credentials. Deploying to AWS If you want to deploy to AWS, we have included a terraform option. For more information on how to use this feature, please see the README in /terraform . SMTP To send emails with the system you will need to setup your SMTP sever and set the relevant SMTP_* variables. For testing we recommend using Ethereal Running in Docker You can build and run the application in Docker locally by running the following commands: docker-compose up -d docker-compose To use the docker-compose.yml file included you will first need to set environment variables . It is not recommended to use docker-compose for any reason other than to test a solution for a separate front-end component. Running within Gitpod You can build and run the application utilizing Gitpod if desired. You must have a Gitpod account, you can sign up for one here if desired: Gitpod . If desired, you can also install a browser extension to make creating your \"pods\" easier here . Once you have created a Gitpod account and installed the extension, you can simply navigate to the Bmore Responsive Github repository and you will see a Gitpod button located at the top of the repo. Clicking on that button should open a Gitpod instance with a running Postgres Database. Once the pod has started, you will be able to run the commands needed to create and seed the Database and run the application. If you haven't installed the extension, then you can create a workspace by prefixing any GitHub URL with gitpod.io/#. For Bmore that would look like https://gitpod.io/#github.com/CodeForBaltimore/Bmore-Responsive","title":"Slow Start - Advanced Config"},{"location":"SlowStart/#slow-start","text":"If you want to tweak the installation of Bmore Responsive or have a different environment, then this page will provide additional detail on how to install/configure Bmore Responsive.","title":"Slow Start"},{"location":"SlowStart/#configuring-via-environment-variables","text":"Regardless of where you are running the system, environment variables to run this application. These variables are set in the .env file on the root directory of Bmore Responsive.","title":"Configuring via Environment variables"},{"location":"SlowStart/#environment-variables","text":"NODE_ENV : The label for your environment. It can be anything you want and will allow you to differentiate multiple instances. Default: development . PORT : The local port you wish to run on. Default: 3001 . DATABASE_HOST : The database host PostgreSQL is running on, which can be specified as a (sub)domain or IP address. Default: db (for docker-compose Postgres instance). DATABASE_PORT : The database port PostgreSQL is running on. Default: 5432 . DATABASE_NAME : The name of the PostgreSQL database to connect to. Default: postgres . DATABASE_SCHEMA : Your local database schema. Default: public . DATABASE_USERNAME : The username for connecting to PostgreSQL. Default: postgres . DATABASE_PASSWORD : The password for connecting to PostgreSQL. JWT_KEY : A secret value to generate JSON Web Tokens (JWTs) locally. SMTP_HOST : optional Hostname for the SMTP server used to send notification emails SMTP_PORT : optional Port number for the SMTP server used to send notification emails SMTP_USER : optional Username for the SMTP server used to send notification emails SMTP_PASSWORD : optional Password for the SMTP server used to send notification emails BYPASS_LOGIN : optional Allows you to hit the endpoints locally without having to login. If you wish to bypass the login process during local dev, set this to true . Default: true . Note: at the moment, login will be bypassed if this variable simply exists in the .env file. Even BYPASS_LOGIN = false will remove the need to login. To require login, simply remove mention of this variable from this file. We do not recommend using the default options for PostgreSQL. The above values are provided as examples. It is more secure to create your own credentials.","title":"Environment Variables"},{"location":"SlowStart/#deploying-to-aws","text":"If you want to deploy to AWS, we have included a terraform option. For more information on how to use this feature, please see the README in /terraform .","title":"Deploying to AWS"},{"location":"SlowStart/#smtp","text":"To send emails with the system you will need to setup your SMTP sever and set the relevant SMTP_* variables. For testing we recommend using Ethereal","title":"SMTP"},{"location":"SlowStart/#running-in-docker","text":"You can build and run the application in Docker locally by running the following commands: docker-compose up -d","title":"Running in Docker"},{"location":"SlowStart/#docker-compose","text":"To use the docker-compose.yml file included you will first need to set environment variables . It is not recommended to use docker-compose for any reason other than to test a solution for a separate front-end component.","title":"docker-compose"},{"location":"SlowStart/#running-within-gitpod","text":"You can build and run the application utilizing Gitpod if desired. You must have a Gitpod account, you can sign up for one here if desired: Gitpod . If desired, you can also install a browser extension to make creating your \"pods\" easier here . Once you have created a Gitpod account and installed the extension, you can simply navigate to the Bmore Responsive Github repository and you will see a Gitpod button located at the top of the repo. Clicking on that button should open a Gitpod instance with a running Postgres Database. Once the pod has started, you will be able to run the commands needed to create and seed the Database and run the application. If you haven't installed the extension, then you can create a workspace by prefixing any GitHub URL with gitpod.io/#. For Bmore that would look like https://gitpod.io/#github.com/CodeForBaltimore/Bmore-Responsive","title":"Running within Gitpod"}]}