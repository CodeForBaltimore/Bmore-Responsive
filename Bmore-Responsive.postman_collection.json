{
	"info": {
		"_postman_id": "2d7f836e-147c-4ffb-b786-c88db9b17836",
		"name": "Bmore-Responsive",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//grab the token and save it into \"token\" env variable",
									"pm.environment.set(\"token\",pm.response.text());",
									"",
									"",
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{testAdminUsername}}\",\n\t\"password\": \"{{testAdminPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// grab the id of the first contatc returned for use in subsequent transactions",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"firstUserEmail\", jsonData.results[0].email);",
									"",
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{firstUserEmail}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{firstUserEmail}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get the email of the new user from the request and save it to env variable",
									"//this will allow deletion of this in the Delete transaction",
									"var reqBody = JSON.parse(request.data);",
									"pm.environment.set(\"newUserEmail\", reqBody.email);",
									"",
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"swans.ron@meparks.com\",\n  \"password\": \"superRocks!\",\n  \"roles\": \n    [\n    \"user\"\n    ],\n  \"displayName\": \"Swans Ron\",\n  \"phone\": \"1234567890\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{testAdminUsername}}\",\n\t\"displayName\": \"Updated Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletes User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/{{newUserEmail}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{newUserEmail}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "userRole",
			"item": [
				{
					"name": "All roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/userRole",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRole"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"test4\",\n  \"path\": \"/test\",\n  \"method\": \"GET\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/userRole",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRole"
							]
						}
					},
					"response": []
				},
				{
					"name": "Removes a role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"test4\",\n  \"path\": \"/test\",\n  \"method\": \"GET\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/userRole/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userRole",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact  ",
			"item": [
				{
					"name": "All Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// grab the id of the first contatc returned for use in subsequent transactions",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"firstContactId\", jsonData.results[0].id);",
									"pm.environment.set(\"secondContactId\", jsonData.results[1].id);",
									"",
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contact",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contact/{{firstContactId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contact",
								"{{firstContactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get the 36 character id of the new contact and save it to env variable",
									"//this will allow deletion of this in the Delete transaction",
									"pm.environment.set(\"newContactId\", pm.response.text().slice(0,36));",
									"",
									"//confirm that request returns a success code of 200",
									"pm.test(\"User was created\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Rod Flanders\",\n  \"email\": [\n    {\n      \"address\": \"rod.flanders@leftorium.com\",\n      \"isPrimary\": \"true\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"number\": \"12345551212\",\n      \"isPrimary\": \"true\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contact",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contact Send Bulk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This needs updating to figure out what exactly is needed here cause the swagger is wrong still. ------ Remove this once test is updated.",
									"//confirm that request returns a success code of 200",
									"pm.test(\"Sent to all contacts\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"relationshipTitle\": [\n    \"Primary Contact\"\n  ],\n  \"contactIds\": [\n    \"ba262fa3-38d9-4c88-b49b-ab306349124a\"\n  ],\n  \"entityIds\": [\n    \"ba262fa3-38d9-4c88-b49b-ab306349124a\"\n  ],\n  \"entityType\": \"Assisted Living Facility\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contact/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contact",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contact Send Single",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This needs updating to figure out what exactly is needed here cause the swagger is wrong still. ------ Remove this once test is updated.",
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contact/send/email/{{newContactId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contact",
								"send",
								"email",
								"{{newContactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Contact was updated\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{firstContactId}}\",\n  \"name\": \"Rod Flanders\",\n  \"email\": [\n    {\n      \"address\": \"rod.flanders@leftorium.com\",\n      \"isPrimary\": \"true\"\n    },\n    {\n      \"address\": \"nrod@church.org\"\n    }\n  ],\n  \"phone\": [\n    {\n      \"number\": \"4105551212\",\n      \"isPrimary\": \"true\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contact",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletes Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contact/{{newContactId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contact",
								"{{newContactId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains calls to excercise the contact endpoint.  Please note that the these calls are expected to be made in order as some subsequent examples rely on values derived from previous calls. For exacmple the \"Get Single Contact\" retrieves the first contact returned from the previous \"Get All Contacts\" transaction.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "entity",
			"item": [
				{
					"name": "All Entities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// grab the id of the first two entities returned for use in subsequent transactions",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"firstEntityId\", jsonData.results[0].id);",
									"pm.environment.set(\"secondEntityId\", jsonData.results[1].id);",
									"",
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/entity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/entity/{{firstEntityId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"entity",
								"{{firstEntityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get the 36 character id of the new entity and save it to env variable",
									"//this will allow deletion of this in the Delete transaction",
									"pm.environment.set(\"newEntityId\", pm.response.text().slice(0,36));",
									"",
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Best Name\",\n  \"type\": \"Lived Assistance Facility\",\n  \"address\": {\n    \"street\": [\n      \"1234 East Main St.\"\n    ],\n    \"city\": \"Rockland\",\n    \"state\": \"ME\",\n    \"zip\": \"04841\"\n  },\n  \"description\": \"Rockiest town in Maine\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/entity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\n   \t\t\"id\": \"{{newEntityId}}\",\n        \"email\": [\n            {\n                \"address\": \"maineLandparks@rocksthesea.com\",\n                \"isPrimary\": \"true\"\n            }\n        ]\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/entity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletes Entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/entity/{{newEntityId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"entity",
								"{{newEntityId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "links",
			"item": [
				{
					"name": "Link Contact to Entities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entities\": [\n    {\n      \"id\": \"{{firstEntityId}}\"\n    },\n    {\n      \"id\": \"{{secondEntityId}}\",\n      \"title\": \"Owner\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contact/link/{{firstContactId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contact",
								"link",
								"{{firstContactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Entity to Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contacts\": [\n    {\n      \"id\": \"{{firstContactId}}\"\n    },\n    {\n      \"id\": \"{{secondContactId}}\",\n      \"title\": \"Owner\"\n    }\n  ]\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/entity/link/{{firstEntityId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"entity",
								"link",
								"{{firstEntityId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "These calls are exampled on how to create relationships between contacts and entities.  These are put in their own folder in postman as they two sample calls require that Get All Contacts and Get All Entities have already been run.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "unlinks",
			"item": [
				{
					"name": "Unlink Contact to Entities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entities\": [\n    {\n      \"id\": \"{{firstEntityId}}\"\n    },\n    {\n      \"id\": \"{{secondEntityId}}\",\n      \"title\": \"Owner\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contact/unlink/{{firstContactId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contact",
								"unlink",
								"{{firstContactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlink Entity to Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contacts\": [\n    {\n      \"id\": \"{{firstContactId}}\"\n    },\n    {\n      \"id\": \"{{secondContactId}}\",\n      \"title\": \"Owner\"\n    }\n  ]\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/entity/unlink/{{firstEntityId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"entity",
								"unlink",
								"{{firstEntityId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "These calls are exampled on how to create relationships between contacts and entities.  These are put in their own folder in postman as they two sample calls require that Get All Contacts and Get All Entities have already been run.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "csv",
			"item": [
				{
					"name": "Contact CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/csv/Contact",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"csv",
								"Contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "Entity CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//confirm that request returns a success code of 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/csv/Entity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"csv",
								"Entity"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Heallthcheck (Express only)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//confirm that request returns a success code of 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Checks the status of your Express app."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}