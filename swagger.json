openapi: 3.0.1
servers:
  - description: localhost
    url: 'http://localhost:3000'
info:
  description: An emergency response and contact management API.
  version: 2.0.0
  title: Bmore Responsive
  contact:
    email: hello@codeforbaltimore.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: unimplemented
    description: Endpoints not available as they are still under development.
  - name: administration
    description: Endpoints related to application administration.
  - name: read-only
    description: Endpoints related to read-only data access.
  - name: authentication
    description: Endpoints related to user authentication.
  - name: authorization
    description: Endpoints related to user authorization.
  - name: operations
    description: Endpoints related to operational characteristics.
  - name: developer
    description: Endpoints available to regular developers
  - name: users
    description: Endpoints related to system users
  - name: email
    description: Endpoints related to e-mail management
  - name: userRole
    description: Endpoints related to userRole
  - name: entities
    description: Endpoints related to entities
  - name: contacts
    description: Endpoints related to contacts
  - name: csv
    description: Endpoints related to CSV data extraction
security:
  - bearerAuth: []
paths:
  /health:
    get:
      security: []
      tags:
        - developer
      summary: returns a healthcheck
      description: |
        This returns simple system information
      responses:
        '200':
          description: the system healthcheck
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckItem'
        '500':
          description: Server error
  /healthCheck:
    get:
      security: []
      tags:
        - operations
        - read-only
        - unimplemented
      summary: Checks the health of the application; will be renamed to '/health'.
      description: The health of individual application components is verified.
      responses:
        '200':
          description: The system healthcheck results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'
        '503':
          description: >-
            The system healthcheck results (at least one component is
            unhealthy).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'
  /security/authenticate:
    post:
      security: []
      tags:
        - authentication
        - unimplemented
      summary: Authenticates a user.
      description: >-
        The system authentication endpoint (NOTE - We should consider switching
        this to Basic auth, Base64-encoding the email/password).
      requestBody:
        description: The provided credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: The successful authentication response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/security/token/{email}':
    post:
      tags:
        - authentication
        - administration
        - unimplemented
      summary: Generates a token for a non-system user.
      description: >-
        Used for providing focused access to contacts who are not users of the
        overall system, and who do not have credentials
      parameters:
        - name: email
          description: E-mail address of the non-system user
          example: external@example.com
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: The successful authentication response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: email
                    value: Address provided is invalid
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /roles:
    get:
      tags:
        - authorization
        - read-only
        - unimplemented
      summary: Retrieves all authorization roles.
      description: Retrieves all defined roles in the application.
      responses:
        '200':
          description: The data corresponding to the created roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleBasicViewData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - authorization
        - administration
        - unimplemented
      summary: Creates a new authorization role.
      description: >-
        Creates a new role in the application that can subsequently be granted
        to users.
      requestBody:
        description: The role to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleData'
      responses:
        '200':
          description: The data corresponding to the created role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleData'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: roleName
                    value: 'Content does not match regular expression ''[a-zA-Z]\w{3,}'''
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Role already exists.
          content:
            application/json:
              example:
                message: Role 'role_viewer' already exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/roles/{roleName}':
    parameters:
      - name: roleName
        description: The name of the role to retrieve
        example: role_viewer
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - authorization
        - read-only
        - unimplemented
      summary: Retrieves the specified authorization role.
      description: Retrieves the detailed information for the specified role.
      responses:
        '200':
          description: The data corresponding to the created role.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleResourceData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: role
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - authorization
        - administration
        - unimplemented
      summary: Modifies an authorization role.
      description: Modifies the non-permission information for the specified role.
      requestBody:
        description: The role information to modify.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDisplayData'
      responses:
        '200':
          description: The data corresponding to the modified role.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: role
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - authorization
        - administration
        - unimplemented
      summary: Removes the specified authorization role.
      description: Removes all information for the specified role.
      responses:
        '204':
          description: The role was successfully deleted.
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: role
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Role is still granted.
          content:
            application/json:
              example:
                message: Role grants still exist
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/roles/{roleName}/addPermission':
    parameters:
      - name: roleName
        description: The name of the role to modify
        example: role_viewer
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - authorization
        - administration
        - unimplemented
      summary: Adds a permission to an authorization role.
      description: >-
        Adds a new permission to a role that grants access to a specific
        resource.
      requestBody:
        description: The permission to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleResource'
      responses:
        '200':
          description: The data corresponding to the modified role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleData'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: roleName
                    value: 'Content does not match regular expression ''[a-zA-Z]\w{3,}'''
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: role
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Permission already exists.
          content:
            application/json:
              example:
                message: >-
                  The permission 'GET:/roles/*' already exists for the role
                  'role_viewer'
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/roles/{roleName}/removePermission':
    parameters:
      - name: roleName
        description: The name of the role to modify
        example: role_viewer
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - authorization
        - administration
        - unimplemented
      summary: Removes a permission from an authorization role.
      description: >-
        Removes an existing permission from a role that granted access to a
        specific resource.
      requestBody:
        description: The permission to remove.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleResource'
      responses:
        '200':
          description: The data corresponding to the modified role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleData'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: roleName
                    value: 'Content does not match regular expression ''[a-zA-Z]\w{3,}'''
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: role
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /role-grants/:
    post:
      tags:
        - authorization
        - administration
        - unimplemented
      summary: Grants one or more roles to one or more users.
      description: Grants users the ability to access application endpoints.
      requestBody:
        description: The grants to create.
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/RoleId'
                  - $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: The data corresponding to the resulting grants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRoleGrant'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: roleName
                    value: 'Content does not match regular expression ''[a-zA-Z]\w{3,}'''
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: role
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/role-grants/{email}':
    post:
      tags:
        - authorization
        - administration
        - unimplemented
      summary: Grants a role to a non-system user.
      description: Grants the non-system user the ability to access application endpoints.
      parameters:
        - name: email
          description: E-mail address of the non-system user
          example: external@example.com
          in: path
          required: true
          schema:
            type: string
            format: email
      requestBody:
        description: The role to grant.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleId'
      responses:
        '204':
          description: The grant was successfully created.
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: roleName
                    value: 'Content does not match regular expression ''[a-zA-Z]\w{3,}'''
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: role
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - authorization
        - read-only
        - unimplemented
      summary: Retrieves roles granted to the user.
      description: Retrieves all roles granted to the user.
      parameters:
        - name: email
          description: E-mail address of the user
          example: user@example.com
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: The roles granted to the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleId'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: role
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/role-grants/{email}/revoke':
    post:
      tags:
        - authorization
        - administration
        - unimplemented
      summary: Revokes a role from a user.
      description: Revokes a user's the ability to access specific  application endpoints.
      parameters:
        - name: email
          description: E-mail address of the user
          example: user@example.com
          in: path
          required: true
          schema:
            type: string
            format: email
      requestBody:
        description: The role to revoke.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleId'
      responses:
        '204':
          description: The grant was successfully revoked.
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: roleName
                    value: 'Content does not match regular expression ''[a-zA-Z]\w{3,}'''
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: role
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    get:
      tags:
        - users
        - read-only
        - unimplemented
      summary: Retrieves all users.
      description: Retrieves all defined users in the application.
      responses:
        '200':
          description: The data corresponding to the created users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserBasicViewData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - users
        - administration
        - unimplemented
      summary: Creates a new user.
      description: >-
        Creates a new user in the application that can subsequently be used to
        authenticate.
      requestBody:
        description: The user to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        '200':
          description: The data corresponding to the created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserViewData'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: email
                    value: Content is not a valid e-mail address
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists.
          content:
            application/json:
              example:
                message: >-
                  A user with the e-mail 'homer.simpson@example.com' already
                  exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/users/{email}':
    parameters:
      - name: email
        description: E-mail address of the non-system user
        example: external@example.com
        in: path
        required: true
        schema:
          type: string
          format: email
    get:
      tags:
        - users
        - read-only
        - unimplemented
      summary: Retrieves the specified user.
      description: Retrieves the detailed information for the user.
      responses:
        '200':
          description: The data corresponding to the created user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserViewData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: user
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - users
        - administration
        - unimplemented
      summary: Modifies a user.
      description: Modifies the non-identifying information for the specified user.
      requestBody:
        description: The user information to modify.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserContent'
      responses:
        '200':
          description: The data corresponding to the modified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: user
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - users
        - administration
        - unimplemented
      summary: Removes the specified user.
      description: Removes all information for the user.
      responses:
        '204':
          description: The user was successfully deleted.
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: user
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Role is still granted.
          content:
            application/json:
              example:
                message: Role grants still exist
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /contacts:
    get:
      tags:
        - contacts
        - read-only
        - unimplemented
      summary: Retrieves all contacts.
      description: Retrieves all defined contacts in the application.
      responses:
        '200':
          description: The data corresponding to the created contacts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactBasicViewData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - contacts
        - administration
        - unimplemented
      summary: Creates a new contact.
      description: >-
        Creates a new contact in the application that can subsequently be used
        for entity interactions.
      requestBody:
        description: The contact to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactData'
      responses:
        '200':
          description: The data corresponding to the created contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactViewData'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: primaryEmail
                    value: Content is not a valid e-mail address
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Contact already exists.
          content:
            application/json:
              example:
                message: A contact with the name 'ned_flanders' already exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/contacts/{contactName}':
    parameters:
      - name: contactName
        description: Name of the contact
        example: ned_flanders
        in: path
        required: true
        schema:
          type: string
          pattern: '^\w{3,}$'
    get:
      tags:
        - contacts
        - read-only
        - unimplemented
      summary: Retrieves the specified contact.
      description: Retrieves the detailed information for the contact.
      responses:
        '200':
          description: The data corresponding to the created contact.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactViewData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: contact
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - contacts
        - administration
        - unimplemented
      summary: Modifies a contact.
      description: Modifies the non-identifying information for the specified contact.
      requestBody:
        description: The contact information to modify.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactContent'
      responses:
        '200':
          description: The data corresponding to the modified contact.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: contact
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - contacts
        - administration
        - unimplemented
      summary: Removes the specified contact.
      description: Removes all information for the contact.
      responses:
        '204':
          description: The contact was successfully deleted.
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: contact
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Contact is still associated with an entity.
          content:
            application/json:
              example:
                message: Entity link still exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /entity-types:
    get:
      tags:
        - entities
        - read-only
        - unimplemented
      summary: Retrieves all entity types.
      description: Retrieves all defined entity types in the application.
      responses:
        '200':
          description: The data corresponding to the created entity types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeReference'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - entities
        - administration
        - unimplemented
      summary: Creates a new entity type.
      description: >-
        Creates a new entity type in the application that can subsequently be
        used for entity classification.
      requestBody:
        description: The entity type to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeReference'
      responses:
        '200':
          description: The data corresponding to the created type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeReference'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: typeName
                    value: Content is not a valid name
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Entity type already exists.
          content:
            application/json:
              example:
                message: An entity type with the name 'primary_care' already exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/entity-types/{typeName}':
    parameters:
      - name: typeName
        description: The name of the entity type.
        example: primary_care
        in: path
        required: true
        schema:
          type: string
          pattern: '^\w{3,}$'
    get:
      tags:
        - entities
        - read-only
        - unimplemented
      summary: Retrieves the specified entity type.
      description: Retrieves the detailed information for the entity type.
      responses:
        '200':
          description: The data corresponding to the created entity type.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeReference'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: entity-type
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - entities
        - administration
        - unimplemented
      summary: Modifies an entity type.
      description: Modifies the non-identifying information for the specified entity type.
      requestBody:
        description: The entity type information to modify.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeReferenceData'
      responses:
        '200':
          description: The data corresponding to the modified entity type.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeReference'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: entity-type
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - entities
        - administration
        - unimplemented
      summary: Removes the specified entity type.
      description: Removes all information for the entity type.
      responses:
        '204':
          description: The entity type was successfully deleted.
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: entity-type
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Entity type is still associated with an entity.
          content:
            application/json:
              example:
                message: Type still in use
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /entities:
    get:
      tags:
        - entities
        - read-only
        - unimplemented
      summary: Retrieves all entities.
      description: Retrieves all defined entities in the application.
      responses:
        '200':
          description: The data corresponding to the created entities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityBasicViewData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - entities
        - administration
        - unimplemented
      summary: Creates a new entity.
      description: >-
        Creates a new entity in the application that can subsequently be used
        for contact interactions.
      requestBody:
        description: The entity to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityData'
      responses:
        '200':
          description: The data corresponding to the created entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityViewData'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: typeName
                    value: Content is not a valid type name
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: entity-type-name
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Entity already exists.
          content:
            application/json:
              example:
                message: An entity with the name 'caresouth' already exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/entities/{entityName}':
    parameters:
      - name: entityName
        description: The name of the entity.
        example: caresouth
        in: path
        required: true
        schema:
          type: string
          pattern: '^\w{3,}$'
    get:
      tags:
        - entities
        - read-only
        - unimplemented
      summary: Retrieves the specified entity.
      description: Retrieves the detailed information for the entity.
      responses:
        '200':
          description: The data corresponding to the created entity.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityViewData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: entity
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - entities
        - administration
        - unimplemented
      summary: Modifies an entity.
      description: Modifies the non-identifying information for the specified entity.
      requestBody:
        description: The entity information to modify.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityContent'
      responses:
        '200':
          description: The data corresponding to the modified entity.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: entity
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - entities
        - administration
        - unimplemented
      summary: Removes the specified entity.
      description: Removes all information for the entity.
      responses:
        '204':
          description: The entity was successfully deleted.
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: entity
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Entity is still associated with a contact.
          content:
            application/json:
              example:
                message: Contact link still exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /contact-associations:
    get:
      tags:
        - contacts
        - entities
        - read-only
        - unimplemented
      summary: Retrieves all contact associations.
      description: >
        Retrieves all defined contact associations in the application. Query
        parameters can be used to filter the results by entity, contact, or
        association type. Values provided will be treated as a logical `AND`
        when filtering.
      parameters:
        - name: contactName
          description: The name of an associated contact used to filter results.
          example: ned_flanders
          in: query
          schema:
            type: string
            pattern: '^\w{3,}$'
        - name: entityName
          description: The name of an associated entity used to filter results.
          example: caresouth
          in: query
          schema:
            type: string
            pattern: '^\w{3,}$'
        - name: typeName
          description: The name of a contact association type used to filter results.
          example: primary_contact
          in: query
          schema:
            type: string
            pattern: '^\w{3,}$'
      responses:
        '200':
          description: The data corresponding to the created contact associations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactAssociationId'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - contacts
        - entities
        - administration
        - unimplemented
      summary: Creates a new contact association.
      description: Creates a new contact association that relates a contact to an entity.
      requestBody:
        description: The contact association to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactAssociationId'
      responses:
        '200':
          description: The data corresponding to the created type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactAssociation'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: typeName
                    value: Content is not a valid name
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: contact
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Contact association already exists.
          content:
            application/json:
              example:
                message: >-
                  An contact association for 'ned_flanders' as 'primary_contact'
                  for 'caresouth' already exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/contact-associations/{contactName}/{entityName}/{typeName}':
    parameters:
      - name: contactName
        description: The name of the associated contact.
        example: ned_flanders
        in: path
        required: true
        schema:
          type: string
          pattern: '^\w{3,}$'
      - name: entityName
        description: The name of the associated entity.
        example: caresouth
        in: path
        required: true
        schema:
          type: string
          pattern: '^\w{3,}$'
      - name: typeName
        description: The name of the contact association type.
        example: primary_contact
        in: path
        required: true
        schema:
          type: string
          pattern: '^\w{3,}$'
    delete:
      tags:
        - contacts
        - entities
        - administration
        - unimplemented
      summary: Deletes a contact association.
      description: Deletes a contact association that related a contact to an entity.
      responses:
        '204':
          description: The contact association has been deleted.
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: typeName
                    value: Content is not a valid name
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Contact association does not exist.
          content:
            application/json:
              example:
                message: No matching contact association exists
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - contacts
        - entities
        - read-only
        - unimplemented
      summary: Retrieves the specified contact association.
      description: Retrieves the detailed information for the contact association.
      responses:
        '200':
          description: The data corresponding to the created contact association.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactAssociation'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: contact-association
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /contact-association-types:
    get:
      tags:
        - contacts
        - entities
        - read-only
        - unimplemented
      summary: Retrieves all contact association types.
      description: Retrieves all defined contact association types in the application.
      responses:
        '200':
          description: The data corresponding to the created contact association types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeReference'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - contacts
        - entities
        - administration
        - unimplemented
      summary: Creates a new contact association type.
      description: >-
        Creates a new contact association type in the application that can
        subsequently be used for contact association classification.
      requestBody:
        description: The contact association type to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeReference'
      responses:
        '200':
          description: The data corresponding to the created type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeReference'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: typeName
                    value: Content is not a valid name
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Contact association already exists.
          content:
            application/json:
              example:
                message: >-
                  An contact association type with the name 'primary_contact'
                  already exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/contact-association-types/{typeName}':
    parameters:
      - name: typeName
        description: The name of the contact association type.
        example: primary_contact
        in: path
        required: true
        schema:
          type: string
          pattern: '^\w{3,}$'
    get:
      tags:
        - contacts
        - entities
        - read-only
        - unimplemented
      summary: Retrieves the specified contact association type.
      description: Retrieves the detailed information for the contact association type.
      responses:
        '200':
          description: The data corresponding to the created contact association type.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeReference'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: contact-association-type
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - contacts
        - entities
        - administration
        - unimplemented
      summary: Modifies an contact association type.
      description: >-
        Modifies the non-identifying information for the specified contact
        association type.
      requestBody:
        description: The contact association type information to modify.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeReferenceData'
      responses:
        '200':
          description: The data corresponding to the modified contact association type.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeReference'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: contact-association-type
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - contacts
        - entities
        - administration
        - unimplemented
      summary: Removes the specified contact association type.
      description: Removes all information for the contact association type.
      responses:
        '204':
          description: The contact association type was successfully deleted.
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: contact-association-type
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >-
            Contact association type is still associated with a contact
            association.
          content:
            application/json:
              example:
                message: Type still in use
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /email:
    post:
      tags:
        - email
        - administration
        - unimplemented
      summary: Send one or more e-mail messages.
      description: >-
        Sends the e-mail messages generated from the provided template. The
        contact association type, contact and entity information are used to
        filter the recipients.
      requestBody:
        description: The specification to use when generating e-mail messages.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSpecification'
      responses:
        '200':
          description: The number of e-mail messages generated for sending.
          content:
            application/json:
              schema:
                type: object
                required:
                  - sentMessageCount
                properties:
                  sentMessageCount:
                    type: integer
                    minimum: 0
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: typeName
                    value: Type name is not a valid association type
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: contact
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /email-templates:
    get:
      tags:
        - email
        - read-only
        - unimplemented
      summary: Retrieves all templates.
      description: Retrieves all defined e-mail templates in the application.
      responses:
        '200':
          description: The data corresponding to the created entities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailTemplateBasicViewData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - email
        - administration
        - unimplemented
      summary: Creates a new e-mail template.
      description: >-
        Creates a new e-mail template in the application that can subsequently
        be used for contact interactions.
      requestBody:
        description: The template to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplateData'
      responses:
        '200':
          description: The data corresponding to the created template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplateData'
        '400':
          description: Invalid content provided.
          content:
            application/json:
              example:
                details:
                  - name: name
                    value: Content is not a valid template name
                message: Request invalid
                statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Entity already exists.
          content:
            application/json:
              example:
                message: A template with the name 'assisted_living' already exists
                statusCode: 409
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/email-templates/{templateName}':
    parameters:
      - name: templateName
        description: The name of the e-mail template.
        example: assisted_living
        in: path
        required: true
        schema:
          type: string
          pattern: '^\w{3,}$'
    get:
      tags:
        - email
        - read-only
        - unimplemented
      summary: Retrieves the specified e-mail template.
      description: Retrieves the detailed information for the e-mail template.
      responses:
        '200':
          description: The data corresponding to the created e-mail template.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailTemplateData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: email-template
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - email
        - administration
        - unimplemented
      summary: Modifies an e-mail template.
      description: >-
        Modifies the non-identifying information for the specified e-mail
        template.
      requestBody:
        description: The e-mail template information to modify.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplateContent'
      responses:
        '200':
          description: The data corresponding to the modified e-mail template.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailTemplateData'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: email-template
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - email
        - administration
        - unimplemented
      summary: Removes the specified e-mail template.
      description: Removes all information for the e-mail template.
      responses:
        '204':
          description: The e-mail template was successfully deleted.
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: email-template
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/questionnaires':
    get:
      tags:
        - questionnaire
        - read-only
        - unimplemented
      summary: Retrieves all questionnaires
      description: Retrieves a list of all questionnaires defined.
      responses:
        '200':
          description: A list of questionnaires.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Questionnaire'
        '401':
          description: Invalid credentials provided.
          content:
            application/json:
              example:
                message: Invalid credentials
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request forbidden.
          content:
            application/json:
              example:
                message: Access not permitted
                statusCode: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found.
          content:
            application/json:
              example:
                details:
                  - name: Resource type
                    value: email-template
                message: Resource not found
                statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process request.
          content:
            application/json:
              example:
                message: Request processing failed
                statusCode: 500
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/login:
    post:
      security: []
      tags:
        - users
      summary: logs in a system user
      description: The system login endpoint.
      deprecated: true
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: test@test.test
                password:
                  type: string
                  example: test
      responses:
        '200':
          description: login token
        '403':
          description: Forbidden
        '422':
          description: Invalid input
        '500':
          description: Server error
  /user:
    post:
      tags:
        - users
      summary: creates a new user
      description: >-
        The new user endpoint.  Note that displayname and phone are not written
        to the database.
      deprecated: true
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: homer.simpson@sfpp.com
                password:
                  type: string
                  format: password
                  example: donuts
                roles:
                  type: array
                  items:
                    type: string
                    example: user
                displayName:
                  type: string
                  example: Homer Simpson
                phone:
                  type: string
                  example: '1234567890'
      responses:
        '200':
          description: user created
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
    get:
      tags:
        - users
      summary: returns all system users
      description: |
        Returns all users within the system and their information.
      deprecated: true
      parameters:
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      responses:
        '200':
          description: List of all users in the system and their information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _meta:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 1
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserItem'
        '401':
          description: Unauthorized
        '500':
          description: Server error
    put:
      tags:
        - users
      summary: updates any single system user
      description: >-
        By sending a valid payload you can update a user.  Note that displayname
        and phone are not stored in the database.
      deprecated: true
      parameters:
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: homer.simpson@sfpp.com
                password:
                  type: string
                  format: password
                  example: donuts
                roles:
                  type: array
                  items:
                    type: string
                    example: admin
                displayName:
                  type: string
                  example: Homer Simpson
                phone:
                  type: string
                  example: '1234567890'
      responses:
        '200':
          description: user updated
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
  '/user/{email}':
    get:
      tags:
        - users
      summary: returns a single system user
      description: 'By passing the username, you can lookup a user.'
      deprecated: true
      parameters:
        - in: path
          name: email
          schema:
            type: string
            format: email
          required: true
          description: email of the user
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      responses:
        '200':
          description: the user object
          content:
            session/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
    delete:
      tags:
        - users
      summary: deletes a single system user
      description: By sending a valid payload you can delete a user.
      deprecated: true
      parameters:
        - in: path
          name: email
          schema:
            type: string
            format: email
          required: true
          description: the email of the user to delete.
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      responses:
        '200':
          description: user deleted
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
  /userRole:
    post:
      tags:
        - userRole
      summary: creates a new user role
      description: The new user role endpoint.
      deprecated: true
      parameters:
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  example: test
                path:
                  type: string
                  example: /test
                method:
                  type: string
                  example: GET
      responses:
        '200':
          description: policy created
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
    get:
      tags:
        - userRole
      summary: returns all system user roles
      description: |
        By passing in the appropriate options, you can search for
        available user roles in the system
      deprecated: true
      parameters:
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      responses:
        '200':
          description: search results matching criteria
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /userRole/delete:
    post:
      tags:
        - userRole
      summary: deletes a single system user role
      description: By sending a valid payload you can delete a user role.
      deprecated: true
      parameters:
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  example: test
                path:
                  type: string
                  example: /test
                method:
                  type: string
                  example: GET
      responses:
        '200':
          description: policy deleted
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
  /entity:
    post:
      tags:
        - entity
      summary: creates a new entity
      description: The new entity endpoint.
      requestBody:
        description: >-
          The body of the payload.  Contact ids must be populated if part of the
          body with existinct contactids.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  type: string
                  example: The Leftorium
                type:
                  type: string
                  example: Assisted Living Facility
                address:
                  type: object
                  properties:
                    street:
                      type: array
                      items:
                        type: string
                        example: 123 Anyplace St.
                    city:
                      type: string
                      example: Baltimore
                    state:
                      type: string
                      example: MD
                    zip:
                      type: string
                      example: '12345'
                description:
                  type: string
                  example: 'Everything for the left handed man, woman, and child!'
      responses:
        '200':
          description: entity created
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
    get:
      tags:
        - entity
      summary: returns all system entities
      description: |
        By passing in the appropriate options, you can search for
        available entities in the system
      parameters:
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
        - in: query
          name: type
          schema:
            type: string
            example: name
          description: The type of field you are searching on
        - in: query
          name: value
          schema:
            type: string
            example: The Leftorium
          description: The value you are searching for
      responses:
        '200':
          description: search results matching criteria
        '401':
          description: Unauthorized
        '500':
          description: Server error
    put:
      tags:
        - entity
      summary: updates any single system entity
      description: By sending a valid payload you can update an entity.
      parameters:
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                  example: 05533f95-b440-4f9d-876d-653636dce0c8
                name:
                  type: string
                  example: The Leftorium
                address:
                  type: object
                  properties:
                    street:
                      type: array
                      items:
                        type: string
                        example: 123 Anyplace St.
                    city:
                      type: string
                      example: Baltimore
                    state:
                      type: string
                      example: MD
                    zip:
                      type: string
                      example: '12345'
                checkIn:
                  type: array
                  items:
                    type: object
                    properties:
                      updatedAt:
                        type: string
                        format: date-time
                        example: '2020-01-21T13:45:52.348Z'
                      status:
                        type: string
                        example: Safe
                      UserId:
                        type: string
                        format: uuid
                        example: 4d9721a2-07f8-45ac-9570-682f4774cfa5
                      ContactId:
                        type: string
                        format: uuid
                        example: 4d9721a2-07f8-45ac-9570-682f4774cfa5
                      questionnaire:
                        type: object
                        properties:
                          id:
                            type: number
                            example: 1
                          question1:
                            type: string
                            example: They have left handed can openers
                          question2:
                            type: boolean
                            example: false
                      notes:
                        type: string
                        example: Everything is okilly dokilly
                description:
                  type: string
                  example: 'Everything for the left-handed man, woman, and child!'
                attributes:
                  type: object
                  properties:
                    capacity:
                      type: number
                      example: 42
      responses:
        '200':
          description: entity updated
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
  '/entity/{entity_id}':
    get:
      tags:
        - entity
      summary: returns a single system entity
      description: 'By passing the entity id, you can lookup an entity.'
      parameters:
        - in: path
          name: entity_id
          schema:
            type: string
            format: uuid
          required: true
          description: id of the entity
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      responses:
        '200':
          description: the entity object
          content:
            session/json:
              schema:
                $ref: '#/components/schemas/EntityItem'
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
    delete:
      tags:
        - entity
      summary: deletes a single system entity
      description: By sending a valid payload you can delete a user.
      parameters:
        - in: path
          name: entity_id
          schema:
            type: string
            format: uuid
          required: true
          description: the id of the entity to delete.
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      responses:
        '200':
          description: entity_id deleted
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
  '/entity/link/{entity_id}':
    post:
      tags:
        - entity
      summary: links an entity with a list of given contacts
      description: >-
        By passing the entity id and list of contacts, you can link the entity
        to each contact.
      parameters:
        - in: path
          name: entity_id
          schema:
            type: string
            format: uuid
          required: true
          description: id of the entity
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contacts
              properties:
                contacts:
                  type: string
                  example:
                    - id: ''
                    - id: ''
                      title: ''
      responses:
        '200':
          description: Successful/already exists
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
  '/entity/unlink/{entity_id}':
    post:
      tags:
        - entity
      summary: unlinks an entity from a list of given contacts
      description: >-
        By passing the entity id and list of contacts, you can unlink the entity
        from each contact.
      parameters:
        - in: path
          name: entity_id
          schema:
            type: string
            format: uuid
          required: true
          description: id of the entity
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contacts
              properties:
                contacts:
                  type: string
                  example:
                    - id: ''
                    - id: ''
      responses:
        '200':
          description: Successful/already exists
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
  /contact:
    post:
      security:
        - bearerAuth: []
      tags:
        - contacts
      summary: creates a new contact
      description: The new contact endpoint.
      deprecated: true
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: The Leftorium
                address:
                  type: object
                  properties:
                    street:
                      type: array
                      items:
                        type: string
                        example: 123 Anyplace St.
                    city:
                      type: string
                      example: Baltimore
                    state:
                      type: string
                      example: MD
                    zip:
                      type: string
                      example: '12345'
                phone:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        example: 987-654-3210
                      isPrimary:
                        type: boolean
                        example: true
                email:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        format: email
                        example: hello@leftorium.com
                      isPrimary:
                        type: boolean
                        example: true
                UserID:
                  type: string
                  format: uuid
                  example: abafa852-ecd0-4d57-9083-85f4dfd9c402
                entities:
                  type: string
                  example:
                    - id: ''
                    - id: ''
                      title: ''
      responses:
        '201':
          description: contact created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Server error
    get:
      tags:
        - contacts
      summary: 'returns all, or searched for, system contacts'
      description: |
        By passing in the appropriate options, you can search for
        available contacts in the system
      deprecated: true
      parameters:
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
        - in: query
          name: type
          schema:
            type: string
            example: email
          description: The type of field you are searching on
        - in: query
          name: value
          schema:
            type: string
            example: ned.flanders@leftorium.com
          description: The value you are searching for
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  _meta:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 1
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContactItem'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error
    put:
      tags:
        - contacts
      summary: updates any single system contact
      description: By sending a valid payload you can update a contact.
      deprecated: true
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                  example: 05533f95-b440-4f9d-876d-653636dce0c8
                name:
                  type: string
                  example: The Leftorium
                address:
                  type: object
                  properties:
                    street:
                      type: array
                      items:
                        type: string
                        example: 123 Anyplace St.
                    city:
                      type: string
                      example: Baltimore
                    state:
                      type: string
                      example: MD
                    zip:
                      type: string
                      example: '12345'
                phone:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        example: 987-654-3210
                      isPrimary:
                        type: boolean
                        example: true
                email:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        format: email
                        example: hello@leftorium.com
                      isPrimary:
                        type: boolean
                        example: true
                UserID:
                  type: string
                  format: uuid
                  example: abafa852-ecd0-4d57-9083-85f4dfd9c402
                entities:
                  type: string
                  example:
                    - id: ''
                    - id: ''
                      title: ''
                attributes:
                  type: object
                  properties:
                    notes:
                      type: string
                      example: Neighbor
      responses:
        '200':
          description: contact updated
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /contact/send:
    post:
      tags:
        - contacts
      summary: sends a check-in email to all contacts
      description: >-
        By sending a request to this endpoint, you can send an email to a single
        contact or all contacts based on entity or contact id. By sending entity
        ids you will send an email to each contact associated with each entity
        id passed. By passed contact ids you will send an email to each contact
        for each entity they are associated with. By passing nothing you will
        send an email to every contact and every association.
      deprecated: true
      parameters:
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationshipTitle:
                  type: array
                  items:
                    type: string
                    example: Primary Contact
      responses:
        '200':
          description: contacts emailed
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Server error
  '/contact/{contact_id}':
    get:
      tags:
        - contacts
      summary: returns a single system contact
      description: 'By passing the contact id, you can lookup a contact.'
      deprecated: true
      parameters:
        - in: path
          name: contact_id
          schema:
            type: string
            format: uuid
          required: true
          description: id of the contact
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      responses:
        '200':
          description: the contact object
          content:
            session/json:
              schema:
                $ref: '#/components/schemas/ContactItem'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Server error
    delete:
      tags:
        - contacts
      summary: deletes a single system contact
      description: By sending a valid payload you can delete a user.
      deprecated: true
      parameters:
        - in: path
          name: contact_id
          schema:
            type: string
            format: uuid
          required: true
          description: the id of the contact to delete.
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      responses:
        '200':
          description: contact_id deleted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Server error
  '/contact/link/{contact_id}':
    post:
      tags:
        - contact
      summary: links a contact with a list of given entities
      description: >-
        By passing the contact id and list of entities, you can link the contact
        to each entity.
      parameters:
        - in: path
          name: contact_id
          schema:
            type: string
            format: uuid
          required: true
          description: id of the contact
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - entities
              properties:
                entities:
                  type: string
                  example:
                    - id: ''
                    - id: ''
                      title: ''
      responses:
        '200':
          description: Successful/already exists
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Server error
  '/contact/unlink/{contact_id}':
    post:
      tags:
        - contact
      summary: unlinks a contact from a list of given entities
      description: >-
        By passing the contact id and list of entities, you can unlink the
        contact from each entity.
      parameters:
        - in: path
          name: contact_id
          schema:
            type: string
            format: uuid
          required: true
          description: id of the contact
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      requestBody:
        description: The body of the payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - entities
              properties:
                entities:
                  type: string
                  example:
                    - id: ''
                    - id: ''
      responses:
        '200':
          description: Successful/already exists
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Server error
  '/csv/{model_type}':
    get:
      tags:
        - csv
      summary: returns a comma separated list of the model_type requested
      description: >-
        By passing the model_type, you are returned a comma separated list of
        that model_type.  Valid model types are Entity, EntityContact, and
        Contact.
      parameters:
        - in: path
          name: model_type
          schema:
            type: string
          required: true
          description: >-
            type of model you want a csv data dump for.  Options are Contact,
            Entity, and EntityContact.
        - in: header
          name: token
          required: false
          deprecated: true
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
      responses:
        '200':
          description: the csv data dump with column headers
        '401':
          description: Unauthorized
        '422':
          description: Invalid input
        '500':
          description: Server error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    HealthcheckItem:
      type: object
      deprecated: true
      required:
        - uptime
        - environment
        - version
        - requestId
      properties:
        uptime:
          type: string
          example: '42:42:42'
        environment:
          type: string
          example: dev
        version:
          type: string
          example: 0.0.1
        requestId:
          type: string
          format: uuid
          example: 602e1bd9-3eb1-4a26-a0d1-6bf08e8c0a66
    HealthCheckData:
      type: object
      description: The health status of an application component.
      required:
        - name
        - status
      properties:
        name:
          type: string
          description: The name of the component.
          example: database
        status:
          type: string
          enum:
            - healthy
            - unhealthy
          description: Whether the component is healthy or not.
          example: healthy
        message:
          type: string
          description: The detailed health message (if applicable).
          example: N/A
    HealthCheckResult:
      type: object
      description: The health status of the application.
      required:
        - uptime
        - environment
        - version
        - requestId
        - checks
      properties:
        uptime:
          type: string
          description: >-
            The amount of time this server has been running, expressed as a
            sequence of integers of decreasing time units; unused units (for
            example, years) will not be included.
          example: '42:42:42'
        environment:
          type: string
          description: The environment in which the application is deployed.
          example: dev
        version:
          type: string
          description: The semantic version of the deployed application.
          example: 0.0.1
        requestId:
          type: string
          description: A unique identifier for the health request.
          format: uuid
          example: 602e1bd9-3eb1-4a26-a0d1-6bf08e8c0a66
        checks:
          type: array
          description: The health status of the individual components.
          items:
            $ref: '#/components/schemas/HealthCheckData'
    LoginRequest:
      type: object
      description: The request used to authenticate.
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: The user's e-mail address.
          format: email
          example: example@example.com
        password:
          type: string
          description: The user's authentication credentials.
          example: somePassword
    LoginResponse:
      type: object
      description: The result of an authentication request.
      required:
        - token
        - expiresAt
      properties:
        token:
          type: string
          description: The JWT content for subsequent authorization.
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M
        expiresAt:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      description: Content format for error responses
      required:
        - message
        - statusCode
      properties:
        details:
          type: array
          description: Arbitrary name-value pairs associated with the error
          items:
            type: object
            properties:
              name:
                type: string
                description: The property name
              value:
                type: string
                description: The property value
        message:
          type: string
          description: The error message
        statusCode:
          type: integer
          format: int32
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          description: The HTTP status code associated with the error
    RoleId:
      type: object
      description: The identifier of the role.
      required:
        - roleName
      properties:
        roleName:
          type: string
          pattern: '^[a-zA-Z]\w{3,}$'
          description: The name of the role.
          example: role_viewer
    RoleDisplayData:
      type: object
      description: Defines authorization role display data.
      required:
        - description
      properties:
        description:
          type: string
          description: The description of the role.
          example: Users with this role can view roles
    RoleResource:
      type: object
      description: The resource that a role is intended to grant access to.
      required:
        - methods
        - path
      properties:
        methods:
          type: array
          description: The HTTP methods corresponding to this role.
          items:
            type: string
            enum:
              - DELETE
              - GET
              - POST
              - PUT
            description: An HTTP method for the corresponding resource endpoint.
            example: GET
        path:
          type: string
          format: uri
          description: The relative path to the resource endpoint to grant.
          example: /roles/*
    RoleBasicViewData:
      type: object
      description: A minimal read-only view of an authorization role.
      allOf:
        - $ref: '#/components/schemas/RoleId'
        - $ref: '#/components/schemas/RoleDisplayData'
    RoleData:
      type: object
      description: A complete view of an authorization role.
      allOf:
        - $ref: '#/components/schemas/RoleId'
        - $ref: '#/components/schemas/RoleResourceData'
    RoleResourceData:
      description: Data for an authorization role and all associated resources.
      allOf:
        - $ref: '#/components/schemas/RoleDisplayData'
        - type: object
          description: The role's associated resources.
          properties:
            resources:
              type: array
              description: The granted resources.
              items:
                $ref: '#/components/schemas/RoleResource'
    UserRoleGrant:
      type: object
      description: An authorization role
      required:
        - roleId
        - userId
      properties:
        roleId:
          $ref: '#/components/schemas/RoleId'
        userId:
          $ref: '#/components/schemas/UserId'
    AuditData:
      type: object
      description: The audit information for data in the application.
      required:
        - createdAt
        - updatedAt
      properties:
        createdAt:
          type: string
          format: date-time
          description: The time the referenced object was created.
          example: '2020-01-21T13:45:52.348Z'
        updatedAt:
          type: string
          format: date-time
          description: The time the referenced object was last modified.
          example: '2020-01-21T13:45:52.348Z'
    PhoneNumber:
      type: object
      description: A phone number.
      required:
        - countryCode
        - number
      properties:
        countryCode:
          type: string
          pattern: '^\d{1,4}$'
          description: The country code for the phone number.
          example: '98'
        number:
          type: string
          pattern: '^\d{6,}$'
          description: The full in-country representation for the phone number.
          example: '5551212'
        type:
          type: string
          pattern: '^\w{3,}$'
          example: Work
    UserId:
      type: object
      description: The identifier of a user.
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The user's e-mail address
          example: homer.simpson@example.com
    UserDisplayData:
      type: object
      description: Defines user display data.
      properties:
        displayName:
          type: string
          description: The text to be displayed to represent the user
          example: Homer Simpson
    UserContent:
      type: object
      description: Defines the content that can be provided when modifying a user.
      allOf:
        - $ref: '#/components/schemas/UserDisplayData'
      properties:
        phone:
          $ref: '#/components/schemas/PhoneNumber'
        attributes:
          type: array
          description: Arbitrary name-value pairs associated with the user
          items:
            type: object
            properties:
              name:
                type: string
                description: The attribute name
                example: Contact type
              value:
                type: string
                description: The attribute value
                example: Primary Contact
    UserData:
      type: object
      description: Defines the content that can be provided when creating a user.
      allOf:
        - $ref: '#/components/schemas/UserId'
        - $ref: '#/components/schemas/UserContent'
    UserBasicViewData:
      type: object
      description: Defines the minimal read-only content retrieved for a user.
      allOf:
        - $ref: '#/components/schemas/UserId'
        - $ref: '#/components/schemas/UserDisplayData'
    UserViewData:
      type: object
      description: Defines the read-only content retrieved for a user.
      allOf:
        - $ref: '#/components/schemas/UserId'
        - $ref: '#/components/schemas/UserData'
        - $ref: '#/components/schemas/AuditData'
    ContactId:
      type: object
      description: The identifier of a contact.
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the contact.
          pattern: '^\w{3,}$'
          example: ned_flanders
    ContactDisplayData:
      type: object
      description: Defines contact display data.
      properties:
        displayName:
          type: string
          description: The text to be displayed to represent the contact.
          example: 'Ned Flanders, Esq.'
    ContactContent:
      type: object
      description: Defines the content that can be provided when modifying a contact.
      allOf:
        - $ref: '#/components/schemas/ContactDisplayData'
      required:
        - primaryEmail
        - primaryPhone
      properties:
        primaryEmail:
          type: string
          format: email
          description: Primary e-mail address for a contact.
          example: ned.flanders@example.com
        additionalEmails:
          type: array
          description: Additional e-mail addresses associated with a contact.
          items:
            type: string
            format: email
            description: An additional e-mail address for a contact.
            example: nflanders@example.com
        primaryPhoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        additionalPhoneNumbers:
          type: array
          description: Additional phone numbers associated with a contact.
          items:
            $ref: '#/components/schemas/PhoneNumber'
    ContactData:
      type: object
      description: Defines the content that can be provided when creating a contact.
      allOf:
        - $ref: '#/components/schemas/ContactId'
        - $ref: '#/components/schemas/ContactContent'
    ContactBasicViewData:
      type: object
      description: Defines the minimal read-only content retrieved for a contact.
      allOf:
        - $ref: '#/components/schemas/ContactId'
        - $ref: '#/components/schemas/ContactDisplayData'
    ContactViewData:
      type: object
      description: Defines the read-only content retrieved for a contact.
      allOf:
        - $ref: '#/components/schemas/ContactId'
        - $ref: '#/components/schemas/ContactData'
        - $ref: '#/components/schemas/AuditData'
    TypeReferenceId:
      type: object
      description: An identifier for generic type information for classification.
      required:
        - typeName
      properties:
        typeName:
          type: string
          description: The name of the type.
          pattern: '^\w{3,}$'
          example: some_type
    TypeReferenceData:
      type: object
      description: Descriptive type information for classification.
      properties:
        displayName:
          type: string
          description: The text to be displayed to represent the type.
          example: Primary Care
    TypeReference:
      type: object
      description: Generic type information for classification.
      allOf:
        - $ref: '#/components/schemas/TypeReferenceId'
        - $ref: '#/components/schemas/TypeReferenceData'
    LocalAddress:
      type: object
      description: Mailing address or location.
      required:
        - streetAddress
        - city
        - state
        - postalCode
      properties:
        streetAddress:
          type: array
          description: The street address (can be multiple lines).
          items:
            minItems: 1
            maxItems: 4
            type: string
            example: 123 Anyplace St.
        city:
          type: string
          description: The city where the address is located.
          example: Baltimore
        state:
          type: string
          description: The state where the address is located.
          example: MD
        postalCode:
          type: string
          description: The postal code corresponding to the address.
          example: '12345'
    EntityId:
      type: object
      description: The identifier of an entity.
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the entity.
          pattern: '^\w{3,}$'
          example: caresouth
    EntityDisplayData:
      type: object
      description: Defines entity display data.
      properties:
        displayName:
          type: string
          description: The text to be displayed to represent the entity.
          example: CareSouth Assisted Living
    EntityContent:
      type: object
      description: Defines the content that can be provided when modifying an entity.
      allOf:
        - $ref: '#/components/schemas/EntityDisplayData'
        - $ref: '#/components/schemas/TypeReferenceId'
      required:
        - streetAddress
      properties:
        streetAddress:
          $ref: '#/components/schemas/LocalAddress'
        mailingAddress:
          $ref: '#/components/schemas/LocalAddress'
    EntityData:
      type: object
      description: Defines the content that can be provided when creating an entity.
      allOf:
        - $ref: '#/components/schemas/EntityId'
        - $ref: '#/components/schemas/EntityContent'
    EntityBasicViewData:
      type: object
      description: Defines the minimal read-only content retrieved for an entity.
      allOf:
        - $ref: '#/components/schemas/EntityId'
        - $ref: '#/components/schemas/EntityDisplayData'
        - $ref: '#/components/schemas/TypeReferenceId'
    EntityViewData:
      type: object
      description: Defines the read-only content retrieved for a contact.
      allOf:
        - $ref: '#/components/schemas/EntityId'
        - $ref: '#/components/schemas/EntityData'
        - $ref: '#/components/schemas/AuditData'
    ContactAssociationId:
      type: object
      description: The identifier of an association between a contact and an entity.
      required:
        - entity
        - contact
        - associationType
      properties:
        entity:
          $ref: '#/components/schemas/EntityId'
        contact:
          $ref: '#/components/schemas/ContactId'
        associationType:
          $ref: '#/components/schemas/TypeReferenceId'
    ContactAssociation:
      type: object
      description: Defines the details of an association between a contact and an entity.
      required:
        - entity
        - contact
        - associationType
      properties:
        entity:
          $ref: '#/components/schemas/EntityData'
        contact:
          $ref: '#/components/schemas/ContactData'
        associationType:
          $ref: '#/components/schemas/TypeReference'
    EmailSpecification:
      type: object
      description: Defines the specification for sending an e-mail.
      required:
        - associationType
        - template
      properties:
        template:
          $ref: '#/components/schemas/EmailTemplateId'
        entity:
          $ref: '#/components/schemas/EntityId'
        contact:
          $ref: '#/components/schemas/ContactId'
        associationType:
          $ref: '#/components/schemas/TypeReferenceId'
    EmailTemplateId:
      type: object
      description: The identifier of a e-mail template.
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the template.
          pattern: '^\w{3,}$'
          example: assisted_living
    EmailTemplateDisplayData:
      type: object
      description: Defines e-mail template display data.
      properties:
        displayName:
          type: string
          description: The text to be displayed to represent the template.
          example: Assisted Living Check-In
    EmailTemplateContent:
      type: object
      description: >-
        Defines the content that can be provided when modifying an e-mail
        template.
      allOf:
        - $ref: '#/components/schemas/EmailTemplateDisplayData'
      required:
        - template
      properties:
        template:
          type: string
          description: >
            A Markdown template for an e-mail message. Substitution fields
            should be included using double-brace notation, and must be named
            using JSON object notation patterns (for example,
            `{{entity.name}}`).
          example: |
            Greetings, {{contact.displayName}}!

            Click [here](https://example.com/login) to log in!
    EmailTemplateBasicViewData:
      type: object
      description: Defines the basic view of an e-mail template.
      allOf:
        - $ref: '#/components/schemas/EmailTemplateId'
        - $ref: '#/components/schemas/EmailTemplateDisplayData'
    EmailTemplateData:
      type: object
      description: Defines the details of an e-mail template.
      allOf:
        - $ref: '#/components/schemas/EmailTemplateId'
        - $ref: '#/components/schemas/EmailTemplateContent'
    UserItem:
      type: object
      deprecated: true
      required:
        - email
      properties:
        id:
          type: string
          format: uuid
          example: 4d9721a2-07f8-45ac-9570-682f4774cfa5
        email:
          type: string
          format: email
          example: homer.simpson@sfpp.com
        displayNamme:
          type: string
          example: Homer Simpson
        phone:
          type: string
          example: '1234567890'
        attributes:
          type: string
          example: null
        createdAt:
          type: string
          format: date-time
          example: '2020-01-21T13:45:52.348Z'
        updatedAt:
          type: string
          format: date-time
          example: '2020-01-21T13:45:52.348Z'
        roles:
          type: array
          items:
            type: string
            example: user
    EntityItem:
      type: object
      deprecated: true
      properties:
        id:
          type: string
          format: uuid
          example: c2fb852c-17fd-4e2b-9ea4-78128af9a5e9
        name:
          type: string
          example: The Leftorium
        type:
          type: string
          example: Test
        address:
          type: object
          properties:
            address:
              type: array
              items:
                type: string
                example: 123 Anyplace St.
            city:
              type: string
              example: Baltimore
            state:
              type: string
              example: MD
            zip:
              type: string
              example: '12345'
        checkIn:
          type: array
          items:
            type: object
            properties:
              updatedAt:
                type: string
                format: date-time
                example: '2020-01-21T13:45:52.348Z'
              status:
                type: string
                example: Safe
              UserId:
                type: string
                format: uuid
                example: 4d9721a2-07f8-45ac-9570-682f4774cfa5
              ContactId:
                type: string
                format: uuid
                example: 4d9721a2-07f8-45ac-9570-682f4774cfa5
              questionnaire:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  question1:
                    type: string
                    example: They have left handed can openers
                  question2:
                    type: boolean
                    example: false
              notes:
                type: string
                example: Everything is okilly dokilly
        description:
          type: string
          example: 'Everything for the left handed man, woman, and child!'
        createdAt:
          type: string
          format: date-time
          example: '2020-01-21T13:45:52.348Z'
        updatedAt:
          type: string
          format: date-time
          example: '2020-01-21T13:45:52.348Z'
    ContactItem:
      type: object
      deprecated: true
      properties:
        id:
          type: string
          format: uuid
          example: abafa852-ecd0-4d57-9083-85f4dfd9c402
        UserID:
          type: string
          format: uuid
          example: abafa852-ecd0-4d57-9083-85f4dfd9c402
        EntityId:
          type: string
          format: uuid
          example: c2fb852c-17fd-4e2b-9ea4-78128af9a5e9
        name:
          type: string
          example: Ned Flanders
        phone:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                example: 654987321
              isPrimary:
                type: boolean
                example: true
        email:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                format: email
                example: ned.flanders@leftorium.com
              isPrimary:
                type: boolean
                example: true
        createdAt:
          type: string
          format: date-time
          example: '2020-01-21T13:45:52.348Z'
        updatedAt:
          type: string
          format: date-time
          example: '2020-01-21T13:45:52.348Z'
    Questionnaire:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: abafa852-ecd0-4d57-9083-85f4dfd9c402
        name:
          type: string
          example: Covid Weekly Status Check
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
          minItems: 1
          maxItems: 50

    Question:
      type: object
      properties:
        index:
          type: integer
          example: 2
        required:
          type: boolean
        questionText:
          type: string
          example: How would you rate your current status?
        responseType:
          type: string
          enum: [short-text, long-text, single-select, multi-select]
          example: single-select
        validResponses:
          type: array
          items:
            type: string
          example: ["Poor","Not Great","Fantastic"]
        allowOther:
          type: boolean
      
