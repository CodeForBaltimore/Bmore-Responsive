{
  "openapi": "3.0.1",
  "servers": [
    {
      "description": "localhost",
      "url": "http://localhost:3000"
    }
  ],
  "info": {
    "description": "An emergency response and contact management API.",
    "version": "1.3.3",
    "title": "Bmore Responsive",
    "contact": {
      "email": "hello@codeforbaltimore.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "developer",
      "description": "Operations available to regular developers"
    },
    {
      "name": "user",
      "description": "Operations related to system users"
    },
    {
      "name": "userRole",
      "description": "Operations related to userRole"
    },
    {
      "name": "entity",
      "description": "Operations related to entities"
    },
    {
      "name": "contact",
      "description": "Operations related to contacts"
    },
    {
      "name": "csv",
      "description": "Operations related to csv"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "security": [],
        "tags": [
          "developer"
        ],
        "summary": "returns a healthcheck",
        "description": "This returns simple system information\n",
        "responses": {
          "200": {
            "description": "the system healthcheck",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthcheckItem"
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "security": [],
        "tags": [
          "user"
        ],
        "summary": "logs in a system user",
        "description": "The system login endpoint.",
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "test@test.test"
                  },
                  "password": {
                    "type": "string",
                    "example": "test"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "login token"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "creates a new user",
        "description": "The new user endpoint.  Note that displayname and phone are not written to the database.",
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "homer.simpson@sfpp.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "donuts"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "user"
                    }
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Homer Simpson"
                  },
                  "phone": {
                    "type": "string",
                    "example": "1234567890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "returns all system users",
        "description": "Returns all users within the system and their information.\n",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all users in the system and their information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 1
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "updates any single system user",
        "description": "By sending a valid payload you can update a user.  Note that displayname and phone are not stored in the database.",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "homer.simpson@sfpp.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "donuts"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "admin"
                    }
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Homer Simpson"
                  },
                  "phone": {
                    "type": "string",
                    "example": "1234567890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user updated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/{email}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "returns a single system user",
        "description": "By passing the username, you can lookup a user.",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "required": true,
            "description": "email of the user"
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the user object",
            "content": {
              "session/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "deletes a single system user",
        "description": "By sending a valid payload you can delete a user.",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "required": true,
            "description": "the email of the user to delete."
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/userRole": {
      "post": {
        "tags": [
          "userRole"
        ],
        "summary": "creates a new user role",
        "description": "The new user role endpoint.",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "example": "test"
                  },
                  "path": {
                    "type": "string",
                    "example": "/test"
                  },
                  "method": {
                    "type": "string",
                    "example": "GET"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "policy created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "userRole"
        ],
        "summary": "returns all system user roles",
        "description": "By passing in the appropriate options, you can search for\navailable user roles in the system\n",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/userRole/delete": {
      "post": {
        "tags": [
          "userRole"
        ],
        "summary": "deletes a single system user role",
        "description": "By sending a valid payload you can delete a user role.",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "example": "test"
                  },
                  "path": {
                    "type": "string",
                    "example": "/test"
                  },
                  "method": {
                    "type": "string",
                    "example": "GET"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "policy deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/entity": {
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "creates a new entity",
        "description": "The new entity endpoint.",
        "requestBody": {
          "description": "The body of the payload.  Contact ids must be populated if part of the body with existinct contactids.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "The Leftorium"
                  },
                  "type": {
                    "type": "string",
                    "example": "Assisted Living Facility"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "street": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "123 Anyplace St."
                        }
                      },
                      "city": {
                        "type": "string",
                        "example": "Baltimore"
                      },
                      "state": {
                        "type": "string",
                        "example": "MD"
                      },
                      "zip": {
                        "type": "string",
                        "example": "12345"
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "example": "Everything for the left handed man, woman, and child!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "entity created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "returns all system entities",
        "description": "By passing in the appropriate options, you can search for\navailable entities in the system\n",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "The type of field you are searching on"
          },
          {
            "in": "query",
            "name": "value",
            "schema": {
              "type": "string",
              "example": "The Leftorium"
            },
            "description": "The value you are searching for"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "entity"
        ],
        "summary": "updates any single system entity",
        "description": "By sending a valid payload you can update an entity.",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "05533f95-b440-4f9d-876d-653636dce0c8"
                  },
                  "name": {
                    "type": "string",
                    "example": "The Leftorium"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "street": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "123 Anyplace St."
                        }
                      },
                      "city": {
                        "type": "string",
                        "example": "Baltimore"
                      },
                      "state": {
                        "type": "string",
                        "example": "MD"
                      },
                      "zip": {
                        "type": "string",
                        "example": "12345"
                      }
                    }
                  },
                  "checkIn": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2020-01-21T13:45:52.348Z"
                        },
                        "status": {
                          "type": "string",
                          "example": "Safe"
                        },
                        "UserId": {
                          "type": "string",
                          "format": "uuid",
                          "example": "4d9721a2-07f8-45ac-9570-682f4774cfa5"
                        },
                        "ContactId": {
                          "type": "string",
                          "format": "uuid",
                          "example": "4d9721a2-07f8-45ac-9570-682f4774cfa5"
                        },
                        "questionnaire": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "example": 1
                            },
                            "question1": {
                              "type": "string",
                              "example": "They have left handed can openers"
                            },
                            "question2": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        },
                        "notes": {
                          "type": "string",
                          "example": "Everything is okilly dokilly"
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "example": "Everything for the left-handed man, woman, and child!"
                  },
                  "attributes": {
                    "type": "object",
                    "properties": {
                      "capacity": {
                        "type": "number",
                        "example": 42
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "entity updated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/entity/{entity_id}": {
      "get": {
        "tags": [
          "entity"
        ],
        "summary": "returns a single system entity",
        "description": "By passing the entity id, you can lookup an entity.",
        "parameters": [
          {
            "in": "path",
            "name": "entity_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "id of the entity"
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the entity object",
            "content": {
              "session/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "entity"
        ],
        "summary": "deletes a single system entity",
        "description": "By sending a valid payload you can delete a user.",
        "parameters": [
          {
            "in": "path",
            "name": "entity_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "the id of the entity to delete."
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "entity_id deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/entity/link/{entity_id}": {
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "links an entity with a list of given contacts",
        "description": "By passing the entity id and list of contacts, you can link the entity to each contact.",
        "parameters": [
          {
            "in": "path",
            "name": "entity_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "id of the entity"
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contacts"
                ],
                "properties": {
                  "contacts": {
                    "type": "string",
                    "example": [
                      {
                        "id": ""
                      },
                      {
                        "id": "",
                        "title": ""
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful/already exists"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/entity/unlink/{entity_id}": {
      "post": {
        "tags": [
          "entity"
        ],
        "summary": "unlinks an entity from a list of given contacts",
        "description": "By passing the entity id and list of contacts, you can unlink the entity from each contact.",
        "parameters": [
          {
            "in": "path",
            "name": "entity_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "id of the entity"
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contacts"
                ],
                "properties": {
                  "contacts": {
                    "type": "string",
                    "example": [
                      {
                        "id": ""
                      },
                      {
                        "id": ""
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful/already exists"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/facilitytype": {
      "get": {
        "tags": ["facilityType"],
        "summary": "returns all facility types",
        "description": "Return all of the facility types defined for this system.",
        "parameters": [{
          "in": "header",
          "name": "token",
          "required": true,
          "schema": {
            "type" : "string",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
          }
        }],
        "responses": {
          "200": {
            "description": "list of facility types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contact": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "contact"
        ],
        "summary": "creates a new contact",
        "description": "The new contact endpoint.",
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "The Leftorium"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "street": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "123 Anyplace St."
                        }
                      },
                      "city": {
                        "type": "string",
                        "example": "Baltimore"
                      },
                      "state": {
                        "type": "string",
                        "example": "MD"
                      },
                      "zip": {
                        "type": "string",
                        "example": "12345"
                      }
                    }
                  },
                  "phone": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "example": 9.87654321E8
                        },
                        "isPrimary": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  },
                  "email": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "format": "email",
                          "example": "hello@leftorium.com"
                        },
                        "isPrimary": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  },
                  "UserID": {
                    "type": "string",
                    "format": "uuid",
                    "example": "abafa852-ecd0-4d57-9083-85f4dfd9c402"
                  },
                  "entities": {
                    "type": "string",
                    "example": [
                      {
                        "id": ""
                      },
                      {
                        "id": "",
                        "title": ""
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "contact created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "returns all, or searched for, system contacts",
        "description": "By passing in the appropriate options, you can search for\navailable contacts in the system\n",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "example": "email"
            },
            "description": "The type of field you are searching on"
          },
          {
            "in": "query",
            "name": "value",
            "schema": {
              "type": "string",
              "example": "ned.flanders@leftorium.com"
            },
            "description": "The value you are searching for"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 1
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "contact"
        ],
        "summary": "updates any single system contact",
        "description": "By sending a valid payload you can update a contact.",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "05533f95-b440-4f9d-876d-653636dce0c8"
                  },
                  "name": {
                    "type": "string",
                    "example": "The Leftorium"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "street": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "123 Anyplace St."
                        }
                      },
                      "city": {
                        "type": "string",
                        "example": "Baltimore"
                      },
                      "state": {
                        "type": "string",
                        "example": "MD"
                      },
                      "zip": {
                        "type": "string",
                        "example": "12345"
                      }
                    }
                  },
                  "phone": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "example": 9.87654321E8
                        },
                        "isPrimary": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  },
                  "email": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "format": "email",
                          "example": "hello@leftorium.com"
                        },
                        "isPrimary": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  },
                  "UserID": {
                    "type": "string",
                    "format": "uuid",
                    "example": "abafa852-ecd0-4d57-9083-85f4dfd9c402"
                  },
                  "entities": {
                    "type": "string",
                    "example": [
                      {
                        "id": ""
                      },
                      {
                        "id": "",
                        "title": ""
                      }
                    ]
                  },
                  "attributes": {
                    "type": "object",
                    "properties": {
                      "notes": {
                        "type": "string",
                        "example": "Neighbor"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "contact updated"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contact/send": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "sends a check-in email to all contacts",
        "description": "By sending a request to this endpoint, you can send an email to a single contact or all contacts based on entity or contact id. By sending entity ids you will send an email to each contact associated with each entity id passed. By passed contact ids you will send an email to each contact for each entity they are associated with. By passing nothing you will send an email to every contact and every association.",
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "relationshipTitle": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "Primary Contact"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "contacts emailed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 1
                        },
                        "message": {
                          "type": "string",
                          "example": "Contacts emailed"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contact/send/{type}/{id}": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "sends a check-in email to all contacts",
        "description": "By sending a request to this endpoint, you can send an email to a single contact or all contacts based on entity or contact id. By sending entity ids you will send an email to each contact associated with each entity id passed. By passed contact ids you will send an email to each contact for each entity they are associated with. By passing nothing you will send an email to every contact and every association.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "id of the entity"
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "example": "entity"
            },
            "required": true,
            "description": "type of the id"
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "contact emailed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 1
                        },
                        "message": {
                          "type": "string",
                          "example": "Contact email sent"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contact/{contact_id}": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "returns a single system contact",
        "description": "By passing the contact id, you can lookup a contact.",
        "parameters": [
          {
            "in": "path",
            "name": "contact_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "id of the contact"
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the contact object",
            "content": {
              "session/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "contact"
        ],
        "summary": "deletes a single system contact",
        "description": "By sending a valid payload you can delete a user.",
        "parameters": [
          {
            "in": "path",
            "name": "contact_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "the id of the contact to delete."
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "contact_id deleted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contact/link/{contact_id}": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "links a contact with a list of given entities",
        "description": "By passing the contact id and list of entities, you can link the contact to each entity.",
        "parameters": [
          {
            "in": "path",
            "name": "contact_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "id of the contact"
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "entities"
                ],
                "properties": {
                  "entities": {
                    "type": "string",
                    "example": [
                      {
                        "id": ""
                      },
                      {
                        "id": "",
                        "title": ""
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful/already exists"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contact/unlink/{contact_id}": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "unlinks a contact from a list of given entities",
        "description": "By passing the contact id and list of entities, you can unlink the contact from each entity.",
        "parameters": [
          {
            "in": "path",
            "name": "contact_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "id of the contact"
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "entities"
                ],
                "properties": {
                  "entities": {
                    "type": "string",
                    "example": [
                      {
                        "id": ""
                      },
                      {
                        "id": ""
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful/already exists"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/csv/{model_type}": {
      "get": {
        "tags": [
          "csv"
        ],
        "summary": "returns a comma separated list of the model_type requested",
        "description": "By passing the model_type, you are returned a comma separated list of that model_type.  Valid model types are Entity, EntityContact, and Contact.",
        "parameters": [
          {
            "in": "path",
            "name": "model_type",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "type of model you want a csv data dump for.  Options are Contact, Entity, and EntityContact."
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "Ned Flanders"
            },
            "description": "The name filter of field you are searching on"
          },
          {
            "in": "header",
            "name": "token",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODA3NTM0MDUsImV4cCI6MTU4MDgzOTgwNX0.Q6W7Vo6By35yjZBeLKkk96s8LyqIE2G39AG1H3LRD9M"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the csv data dump with column headers"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/questionnaires": {
      "get": {
        "tags": [
          "questionnaires",
          "read-only"
        ],
        "summary": "Retrieves all questionnaires.",
        "description": "Retrieves all defined questionnaires in the application.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created questionnaires.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionnaireBasicViewData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "questionnaires",
          "administration"
        ],
        "summary": "Creates a new questionnaire.",
        "description": "Creates a new questionnaire in the application.",
        "requestBody": {
          "description": "The questionnaire to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionnaireContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The data corresponding to the created question.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionnaireViewData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/questionnaires/{questionnaireId}": {
      "parameters": [
        {
          "name": "questionnaireId",
          "description": "The identifier of the question.",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          }
        }
      ],
      "get": {
        "tags": [
          "questionnaires",
          "read-only"
        ],
        "summary": "Retrieves the specified questionnaire.",
        "description": "Retrieves the detailed information for the questionnaire.",
        "responses": {
          "200": {
            "description": "The data corresponding to the created questionnaire.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionnaireViewData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The requested resource was not found."
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "questionnaires",
          "administration"
        ],
        "summary": "Removes the specified questionnaire.",
        "description": "Removes all information for the questionnaire.",
        "responses": {
          "204": {
            "description": "The questionnaire was successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The requested resource was not found."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "HealthcheckItem": {
        "type": "object",
        "required": [
          "uptime",
          "environment",
          "version",
          "requestId"
        ],
        "properties": {
          "uptime": {
            "type": "string",
            "example": "42:42:42"
          },
          "environment": {
            "type": "string",
            "example": "dev"
          },
          "version": {
            "type": "string",
            "example": "0.0.1"
          },
          "requestId": {
            "type": "string",
            "format": "uuid",
            "example": "602e1bd9-3eb1-4a26-a0d1-6bf08e8c0a66"
          }
        }
      },
      "UserItem": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "4d9721a2-07f8-45ac-9570-682f4774cfa5"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "homer.simpson@sfpp.com"
          },
          "displayNamme": {
            "type": "string",
            "example": "Homer Simpson"
          },
          "phone": {
            "type": "string",
            "example": "1234567890"
          },
          "attributes": {
            "type": "string",
            "example": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-21T13:45:52.348Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-21T13:45:52.348Z"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "user"
            }
          }
        }
      },
      "EntityItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "c2fb852c-17fd-4e2b-9ea4-78128af9a5e9"
          },
          "name": {
            "type": "string",
            "example": "The Leftorium"
          },
          "type": {
            "type": "string",
            "example": "Test"
          },
          "address": {
            "type": "object",
            "properties": {
              "address": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "123 Anyplace St."
                }
              },
              "city": {
                "type": "string",
                "example": "Baltimore"
              },
              "state": {
                "type": "string",
                "example": "MD"
              },
              "zip": {
                "type": "string",
                "example": "12345"
              }
            }
          },
          "checkIn": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2020-01-21T13:45:52.348Z"
                },
                "status": {
                  "type": "string",
                  "example": "Safe"
                },
                "UserId": {
                  "type": "string",
                  "format": "uuid",
                  "example": "4d9721a2-07f8-45ac-9570-682f4774cfa5"
                },
                "ContactId": {
                  "type": "string",
                  "format": "uuid",
                  "example": "4d9721a2-07f8-45ac-9570-682f4774cfa5"
                },
                "questionnaire": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "question1": {
                      "type": "string",
                      "example": "They have left handed can openers"
                    },
                    "question2": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                },
                "notes": {
                  "type": "string",
                  "example": "Everything is okilly dokilly"
                }
              }
            }
          },
          "description": {
            "type": "string",
            "example": "Everything for the left handed man, woman, and child!"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-21T13:45:52.348Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-21T13:45:52.348Z"
          }
        }
      },
      "ContactItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "abafa852-ecd0-4d57-9083-85f4dfd9c402"
          },
          "UserID": {
            "type": "string",
            "format": "uuid",
            "example": "abafa852-ecd0-4d57-9083-85f4dfd9c402"
          },
          "EntityId": {
            "type": "string",
            "format": "uuid",
            "example": "c2fb852c-17fd-4e2b-9ea4-78128af9a5e9"
          },
          "name": {
            "type": "string",
            "example": "Ned Flanders"
          },
          "phone": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": 6.54987321E8
                },
                "isPrimary": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "email": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "format": "email",
                  "example": "ned.flanders@leftorium.com"
                },
                "isPrimary": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-21T13:45:52.348Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-21T13:45:52.348Z"
          }
        }
      },
      "AuditData": {
        "type": "object",
        "description": "The audit information for data in the application.",
        "readOnly": true,
        "required": [
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the referenced object was created.",
            "example": "2020-01-21T13:45:52.348Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the referenced object was last modified.",
            "example": "2020-01-21T13:45:52.348Z"
          }
        }
      },
      "QuestionIdData": {
        "type": "object",
        "description": "The identifier of a question for a questionnaire.",
        "required": [
          "questionId"
        ],
        "properties": {
          "questionId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of the question",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "QuestionBasicContent": {
        "type": "object",
        "description": "Defines the data used when creating a question for a questionnaire.",
        "required": [
          "questionText",
          "questionType",
          "required"
        ],
        "properties": {
          "questionText": {
            "type": "string",
            "description": "Information that will be displayed to the questionnaire recipient",
            "maxLength": 1024,
            "minLength": 3,
            "example": "Are you having a cow?"
          },
          "questionType": {
            "type": "string",
            "description": "Identifies the type of question; this is used for both validation and rendering.",
            "example": "boolean",
            "enum": [
              "informational",
              "boolean",
              "short-text",
              "long-text",
              "single-select",
              "multi-select"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "Indicates whether the question must be answered. This should always be false for an\ninformational question",
            "default": false
          }
        }
      },
      "QuestionContent": {
        "type": "object",
        "description": "Defines the data used when creating a question for a questionnaire.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionBasicContent"
          }
        ],
        "properties": {
          "options": {
            "type": "array",
            "example": [
              "Yes",
              "No"
            ],
            "items": {
              "description": "The values to display as potential answers for a question. Values can only be \nprovided for boolean, single-selct or multi-select question types.",
              "uniqueItems": true,
              "maxItems": 16,
              "type": "string"
            }
          },
          "allowOther": {
            "type": "boolean",
            "description": "Indicates whether an 'Other' choice should be presented as part of a \nsingle-select or multi-select option list. This must be false for all other \nquestion types.",
            "default": false
          }
        }
      },
      "QuestionBasicViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for a question.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionIdData"
          },
          {
            "$ref": "#/components/schemas/QuestionBasicContent"
          }
        ]
      },
      "QuestionViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for a question.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionIdData"
          },
          {
            "$ref": "#/components/schemas/QuestionContent"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      },
      "QuestionnaireIdData": {
        "type": "object",
        "description": "The identifier of a questionnaire.",
        "required": [
          "questionnaireId"
        ],
        "properties": {
          "questionnaireId": {
            "type": "string",
            "format": "uuid",
            "description": "The system-generated identifier of the questionnaire",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "QuestionnaireContent": {
        "type": "object",
        "description": "Defines the content to use when creating or modifying a questionnaire.",
        "required": [
          "description",
          "questions"
        ],
        "properties": {
          "description": {
            "type": "string",
            "example": "Check-in questions for 2020 event"
          },
          "questions": {
            "type": "array",
            "minLength": 1,
            "maxLength": 32,
            "items": {
              "$ref": "#/components/schemas/QuestionBasicViewData"
            }
          }
        }
      },
      "QuestionnaireBasicViewData": {
        "type": "object",
        "description": "Defines the basic read-only content retrieved for a questionnaire.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionnaireIdData"
          },
          {
            "$ref": "#/components/schemas/QuestionnaireContent"
          }
        ],
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version of the questionnaire.",
            "readOnly": true,
            "minimum": 1,
            "example": 3
          }
        }
      },
      "QuestionnaireViewData": {
        "type": "object",
        "description": "Defines the read-only content retrieved for a questionnaire.",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuestionnaireBasicViewData"
          },
          {
            "$ref": "#/components/schemas/AuditData"
          }
        ]
      }
    }
  }
}
